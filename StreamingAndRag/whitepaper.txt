package com.tops.common.crw.reports.bulkCrewSchedule.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;

import com.tops.common.crw.reports.bulkCrewSchedule.dataProvider.BulkCrewScheduleReportDTO;
import com.tops.common.crw.reports.bulkCrewSchedule.schemaobjects.BulkCrewScheduleReportSO;
import com.tops.common.crw.reports.bulkCrewSchedule.schemaobjects.BulkCrewScheduleReportTable;
import com.tops.common.crw.reports.utils.CrewReportsSqlUtil;

public class BulkCrewScheduleReportSqlDao extends CrewReportsSqlUtil {

	List<BulkCrewScheduleReportSO> bulkCrewScheduleReportSOList = new ArrayList<BulkCrewScheduleReportSO>();

	@SuppressWarnings("rawtypes")
	public Collection getBulkCrewScheduleReportList(BulkCrewScheduleReportDTO bulkCrewScheduleReportDTO) {
		Map<String, BulkCrewScheduleReportSO> mapFromResultSetProcessing = new HashMap<>();
		//List<String> datesInRange = getDatesInRange(bulkCrewScheduleReportDTO);
		List<List<String>> datesInRangeList = getDatesInRange(bulkCrewScheduleReportDTO);
		List<String> datesInRange = null;
		List<String> datesInRange2 = null;
		List<BulkCrewScheduleReportSO> bulkCrewScheduleReportSOList = new ArrayList<BulkCrewScheduleReportSO>();

		if(!CollectionUtils.isEmpty(datesInRangeList)){
			datesInRange = datesInRangeList.get(0);
			datesInRange2 = datesInRangeList.get(1);
		}
		
		long setTimeMain = System.currentTimeMillis();
		try {
			if (BulkCrewScheduleReportTable.ACTUAL.equalsIgnoreCase(bulkCrewScheduleReportDTO.getReportBasedOn())) {

				mapFromResultSetProcessing = getBulkCrewScheduleReportListActual(datesInRange, datesInRange2 ,
						bulkCrewScheduleReportDTO);

				mapFromResultSetProcessing = processBulkCrewSOMapForIndicators(datesInRange, mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}

			else if (BulkCrewScheduleReportTable.PUBLISHED
					.equalsIgnoreCase(bulkCrewScheduleReportDTO.getReportBasedOn())) {

				mapFromResultSetProcessing = getBulkCrewScheduleReportListPublished(datesInRange, datesInRange2 ,
						bulkCrewScheduleReportDTO);

				mapFromResultSetProcessing = processBulkCrewSOMapForIndicators(datesInRange, mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}

			else if (BulkCrewScheduleReportTable.VS.equalsIgnoreCase(bulkCrewScheduleReportDTO.getReportBasedOn())) {

				Map<String, BulkCrewScheduleReportSO> mapFromResultSetProcessingAct = new HashMap<>();
				Map<String, BulkCrewScheduleReportSO> mapFromResultSetProcessinPub = new HashMap<>();

				mapFromResultSetProcessingAct = getBulkCrewScheduleReportListActual(datesInRange, datesInRange2 ,
						bulkCrewScheduleReportDTO);

				mapFromResultSetProcessingAct = processBulkCrewSOMapForIndicatorsActVsPub("ACTUAL",datesInRange,
						mapFromResultSetProcessingAct, bulkCrewScheduleReportDTO);

				mapFromResultSetProcessinPub = getBulkCrewScheduleReportListPublished(datesInRange, datesInRange2 ,
						bulkCrewScheduleReportDTO);

				mapFromResultSetProcessinPub = processBulkCrewSOMapForIndicatorsActVsPub("PUBLISHED",datesInRange, 
						mapFromResultSetProcessinPub, bulkCrewScheduleReportDTO);

				bulkCrewScheduleReportSOList = getBulkCrewScheduleActVsPubReportList(mapFromResultSetProcessingAct,
						mapFromResultSetProcessinPub);

				return bulkCrewScheduleReportSOList;

			}

			if (!CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				for (Entry<String, BulkCrewScheduleReportSO> entry : mapFromResultSetProcessing.entrySet()) {
					if (null != entry.getValue())
						bulkCrewScheduleReportSOList.add(entry.getValue());
				}
			}

		}

		catch (Exception e) {
			e.printStackTrace();
		}

		long setTime2 = System.currentTimeMillis() - setTimeMain;
		System.out
				.println("Bulk Crew Schedule  Report --> Time Taken to fetch the Whole Result for Bulk Crew Schedule: "
						+ setTime2);

		return bulkCrewScheduleReportSOList;

	}

	private Map<String, BulkCrewScheduleReportSO> processBulkCrewSOMapForIndicators(List<String> datesInRange,
			Map<String, BulkCrewScheduleReportSO> mapFromResultSetProcessing,
			BulkCrewScheduleReportDTO bulkCrewScheduleReportDTO) {
		
		if (BulkCrewScheduleReportTable.ACTUAL.equalsIgnoreCase(bulkCrewScheduleReportDTO.getReportBasedOn())) {
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getStatistics())
					&& "true".equals(bulkCrewScheduleReportDTO.getStatistics())
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setStatisticsInBulkSOMap(mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDailyStatistics())
					&& "true".equals(bulkCrewScheduleReportDTO.getDailyStatistics())
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setDailyStatisticsInBulkSOMap(datesInRange,mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			
			if ((!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getNotesIndicator())
					&& bulkCrewScheduleReportDTO.getNotesIndicator().length() > 0
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) || (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getMessageIndicator())
							&& bulkCrewScheduleReportDTO.getMessageIndicator().length() > 0
							&& !CollectionUtils.isEmpty(mapFromResultSetProcessing))) {
				mapFromResultSetProcessing = setNotesIndicatorInBulkSOMap(datesInRange, mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getFdpIndicator())
					&& bulkCrewScheduleReportDTO.getFdpIndicator().length() > 0
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setFDPIndicatorInBulkSOMap(datesInRange, mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDutyIndicator())
					&& bulkCrewScheduleReportDTO.getDutyIndicator().length() > 0
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setDutyIndicatorInBulkSOMap(datesInRange, mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}

		}

		else if (BulkCrewScheduleReportTable.PUBLISHED
				.equalsIgnoreCase(bulkCrewScheduleReportDTO.getReportBasedOn())) {
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getStatistics())
					&& "true".equals(bulkCrewScheduleReportDTO.getStatistics())
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setStatisticsInBulkSOMapPublished(mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDailyStatistics())
					&& "true".equals(bulkCrewScheduleReportDTO.getDailyStatistics())
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setDailyStatisticsInBulkSOMapPublished(datesInRange,mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			
			if ((!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getNotesIndicator())
					&& bulkCrewScheduleReportDTO.getNotesIndicator().length() > 0
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) || (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getMessageIndicator())
							&& bulkCrewScheduleReportDTO.getMessageIndicator().length() > 0
							&& !CollectionUtils.isEmpty(mapFromResultSetProcessing))) {
				mapFromResultSetProcessing = setNotesIndicatorInBulkSOMap(datesInRange, mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getFdpIndicator())
					&& bulkCrewScheduleReportDTO.getFdpIndicator().length() > 0
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setFDPIndicatorInBulkSOMap(datesInRange, mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDutyIndicator())
					&& bulkCrewScheduleReportDTO.getDutyIndicator().length() > 0
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setDutyIndicatorPubInBulkSOMap(datesInRange, mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
		}


		return mapFromResultSetProcessing;

	}
	private Map<String, BulkCrewScheduleReportSO> processBulkCrewSOMapForIndicatorsActVsPub(String reportType, List<String> datesInRange,
			Map<String, BulkCrewScheduleReportSO> mapFromResultSetProcessing,
			BulkCrewScheduleReportDTO bulkCrewScheduleReportDTO) {
		
		if (BulkCrewScheduleReportTable.ACTUAL.equalsIgnoreCase(reportType)) {
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getStatistics())
					&& "true".equals(bulkCrewScheduleReportDTO.getStatistics())
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setStatisticsInBulkSOMap(mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDailyStatistics())
					&& "true".equals(bulkCrewScheduleReportDTO.getDailyStatistics())
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setDailyStatisticsInBulkSOMap(datesInRange,mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			
			if ((!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getNotesIndicator())
					&& bulkCrewScheduleReportDTO.getNotesIndicator().length() > 0
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) || (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getMessageIndicator())
							&& bulkCrewScheduleReportDTO.getMessageIndicator().length() > 0
							&& !CollectionUtils.isEmpty(mapFromResultSetProcessing))) {
				mapFromResultSetProcessing = setNotesIndicatorInBulkSOMap(datesInRange, mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getFdpIndicator())
					&& bulkCrewScheduleReportDTO.getFdpIndicator().length() > 0
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setFDPIndicatorInBulkSOMap(datesInRange, mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDutyIndicator())
					&& bulkCrewScheduleReportDTO.getDutyIndicator().length() > 0
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setDutyIndicatorInBulkSOMap(datesInRange, mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}

		}

		else if (BulkCrewScheduleReportTable.PUBLISHED
				.equalsIgnoreCase(reportType)) {
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getStatistics())
					&& "true".equals(bulkCrewScheduleReportDTO.getStatistics())
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setStatisticsInBulkSOMapPublished(mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDailyStatistics())
					&& "true".equals(bulkCrewScheduleReportDTO.getDailyStatistics())
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setDailyStatisticsInBulkSOMapPublished(datesInRange,mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			
			if ((!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getNotesIndicator())
					&& bulkCrewScheduleReportDTO.getNotesIndicator().length() > 0
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) || (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getMessageIndicator())
							&& bulkCrewScheduleReportDTO.getMessageIndicator().length() > 0
							&& !CollectionUtils.isEmpty(mapFromResultSetProcessing))) {
				mapFromResultSetProcessing = setNotesIndicatorInBulkSOMap(datesInRange, mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getFdpIndicator())
					&& bulkCrewScheduleReportDTO.getFdpIndicator().length() > 0
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setFDPIndicatorInBulkSOMap(datesInRange, mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDutyIndicator())
					&& bulkCrewScheduleReportDTO.getDutyIndicator().length() > 0
					&& !CollectionUtils.isEmpty(mapFromResultSetProcessing)) {
				mapFromResultSetProcessing = setDutyIndicatorPubInBulkSOMap(datesInRange, mapFromResultSetProcessing,
						bulkCrewScheduleReportDTO);

			}
		}


		return mapFromResultSetProcessing;

	}

	/// Result Set fetching for Actual Roster
	private Map<String, BulkCrewScheduleReportSO> getBulkCrewScheduleReportListActual(List<String> datesInRange,
			List<String> datesInRange2, BulkCrewScheduleReportDTO bulkCrewScheduleReportDTO) {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		String previousCrewId = "";
		Connection connection = null;
		String startDate = null;
		String endDate = null;
		String staffNumberTempStr = null;
		String rankTempStr = null;
		String rosterFormat = null;
		String fleetTempStr = null;
		String crewTypeTempStr = null;
		String timesIn = null;
		String base = null;
		String tempStr = null;
		String flightTimes = null;
		String showReportTime = "0";
		Boolean showNotifTime = false;
		Boolean showPA = false;
		String crewId = null;
		long setTime2 = 0;
		long setTime = 0;
		long baseTime = 0;

		SimpleDateFormat myFormat2 = new SimpleDateFormat("dd-MMM-yy");
		SimpleDateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		BulkCrewScheduleReportSO bulkCrewScheduleReportSO = new BulkCrewScheduleReportSO();

		Map<String, BulkCrewScheduleReportSO> bulkSOMap = new LinkedHashMap<>();
		try {

			System.out.println("------------Entering Bulk Crew Schedule Data Set---------------");
			connection = getConnection();
			StringBuffer strBuffer = new StringBuffer();

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getStaffNumber())
					&& bulkCrewScheduleReportDTO.getStaffNumber().length() > 0) {
				staffNumberTempStr = "'" + bulkCrewScheduleReportDTO.getStaffNumber() + "'";
			} else {
				staffNumberTempStr = "NULL";
			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getRank())
					&& bulkCrewScheduleReportDTO.getRank().length() > 0) {
				rankTempStr = "'" + bulkCrewScheduleReportDTO.getRank() + "'";
			} else {
				rankTempStr = "NULL";
			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getFleet())
					&& bulkCrewScheduleReportDTO.getFleet().length() > 0) {
				fleetTempStr = "'" + bulkCrewScheduleReportDTO.getFleet() + "'";
			} else {
				fleetTempStr = "NULL";
			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getCrewType())
					&& bulkCrewScheduleReportDTO.getCrewType().length() > 0) {
				crewTypeTempStr = "'" + bulkCrewScheduleReportDTO.getCrewType() + "'";
			} else {
				crewTypeTempStr = "NULL";
			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getFlightTimesIn())
					&& bulkCrewScheduleReportDTO.getFlightTimesIn().length() > 0) {
				flightTimes = bulkCrewScheduleReportDTO.getFlightTimesIn();
			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getReportTime())
					&& "true".equals(bulkCrewScheduleReportDTO.getReportTime())) {
				showReportTime = "1";
			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getNotifIndicator())
					&& "true".equals(bulkCrewScheduleReportDTO.getNotifIndicator())) {
				showNotifTime = true;

			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getPreasgnIndicator())
					&& "true".equals(bulkCrewScheduleReportDTO.getPreasgnIndicator())) {
				showPA = true;
			}

			/// ------MANDatory Fields from UI----//
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getRosterFormat())
					&& bulkCrewScheduleReportDTO.getRosterFormat().length() > 0) {
				rosterFormat = bulkCrewScheduleReportDTO.getRosterFormat();
			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getTimesIn())
					&& bulkCrewScheduleReportDTO.getTimesIn().length() > 0) {
				if ("DOH".equalsIgnoreCase(bulkCrewScheduleReportDTO.getTimesIn())) {
/*					String baseStr = personalCrewScheduleReportDTO.getBaseValue();
					String timeDiff = baseStr.substring(baseStr.indexOf('(') + 1, baseStr.indexOf(')')).replace('.',
							':');
					String[] timeDiffArr = timeDiff.split(":");*/
					baseTime = 180;
					//timesIn = personalCrewScheduleReportDTO.getTimesIn();
					timesIn = "BASE";
				} else
					timesIn = bulkCrewScheduleReportDTO.getTimesIn();
			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getFlightTimesIn())
					&& bulkCrewScheduleReportDTO.getFlightTimesIn().length() > 0) {
				flightTimes = bulkCrewScheduleReportDTO.getFlightTimesIn();
			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getBase())
					&& bulkCrewScheduleReportDTO.getBase().length() > 0) {
				base = bulkCrewScheduleReportDTO.getBase();
			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDateRange())) {

				String[] period = bulkCrewScheduleReportDTO.getDateRange().split(BulkCrewScheduleReportTable.TO);
				startDate = period[0].trim();
				endDate = period[1].trim();
			}

			strBuffer.append(" WITH crwid AS " 
					+ "  (SELECT distinct d.id crew_id, " 
					+ "          1 t_c, "
					+ "          last_value(p.crew_type) ignore nulls over (partition by d.id order by d.id) crew_type, "
					+ "          d.stf_num, " 
					+ "          d.dspy_name ,  "
					+ "			 MST.RANK_DSPY_PRTY,  "
					+ " 		 first_value(p.eff_from_dt) ignore nulls over (partition by d.id order by d.id) eff_from_dt,"
					+ " 		 last_value(p.eff_to_dt) ignore nulls over (partition by d.id order by d.id)  eff_to_dt,"
					+ " 		 last_value(p.rank) ignore nulls over (partition by d.id order by d.id) last_rank,"
					+ " 		 last_value(p.flet) ignore nulls over (partition by d.id order by d.id) last_flet ,"
					+ "    		 last_value(p.rank_seq) ignore nulls over (partition BY d.id order by d.id) last_rank_seq "
					+ "   		FROM crw_own.crw_crw_data d , " 
					+ "        	crw_own.crw_crw_plmt p, "
					+ "		   	crw_own.crw_rank_mst mst , "
					+ "		  	crw_own.crw_crw_empl employment2_, "
					+ "     (SELECT to_date('" + startDate + "','dd-mon-yyyy') d1 " + "      FROM dual) l_d1, " + " "
					+ "     (SELECT to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') d2 "
					+ "      FROM dual) l_d2 " 
					+ "   WHERE d.delete_ind = 0 " 
					+ " AND p.delete_ind = 0  "
					+ "	AND  mst.delete_ind=0 "
					+ " AND (employment2_.delete_ind=0 or employment2_.delete_ind is null)  " 
					+ " AND d.id = p.crew_id "
					+ " AND p.eff_from_dt <= l_d2.d2" 
					+ " AND mst.rank_code = p.rank    "
					+ " AND p.eff_to_dt >= l_d1.d1 "

					+ " AND d.id  = employment2_.crew_id " 
					+ " AND employment2_.empl_stt_date <='" + endDate + "'  " 
					+ " AND NVL(employment2_.empl_end_date, '17-Sep-2069')>='" + startDate + "' "
					+ " AND ((" + staffNumberTempStr + " IS NULL " 
					+ "           AND 1 =1) " 
					+ "          OR ("
					+ staffNumberTempStr + " IS NOT NULL " 
					+ "              AND d.stf_num IN "
					+ "                (SELECT regexp_substr(" + staffNumberTempStr + ", '[^,]+', 1, LEVEL) token "
					+ "                 FROM dual CONNECT BY LEVEL <= length(" + staffNumberTempStr
					+ ") - length(REPLACE(" + staffNumberTempStr + ", ',', '')) + 1))) " + "     AND (("
					+ crewTypeTempStr + " IS NULL " + "           AND 1 =1) " + "          OR (" + crewTypeTempStr
					+ " IS NOT NULL " + "              AND crew_type IN " + "                (SELECT regexp_substr("
					+ crewTypeTempStr + ", '[^,]+', 1, LEVEL) token "
					+ "                 FROM dual CONNECT BY LEVEL <= length(" + crewTypeTempStr + ") - length(REPLACE("
					+ crewTypeTempStr + ", ',', '')) + 1))) " + "     AND ((" + fleetTempStr + " IS NULL "
					+ "           AND 1 =1) " + "          OR (" + fleetTempStr + " IS NOT NULL "
					+ "              AND flet IN " + "                (SELECT regexp_substr(" + fleetTempStr
					+ ", '[^,]+', 1, LEVEL) token " + "                 FROM dual CONNECT BY LEVEL <= length("
					+ fleetTempStr + ") - length(REPLACE(" + fleetTempStr + ", ',', '')) + 1))) " + "     AND (("
					+ rankTempStr + " IS NULL " + "           AND 1 =1) " + "          OR (" + rankTempStr
					+ " IS NOT NULL " + "              AND rank IN " + "                (SELECT regexp_substr("
					+ rankTempStr + ", '[^,]+', 1, LEVEL) token "
					+ "                 FROM dual CONNECT BY LEVEL <= length(" + rankTempStr + ") - length(REPLACE("
					+ rankTempStr + ", ',', '')) + 1))) " + "     AND ( ( '" + base + "' IS NULL "
					+ "           AND 1 = 1 ) " + "         OR ( '" + base + "' IS NOT NULL "
					+ "              AND base IN " + "                (SELECT Regexp_substr('" + base
					+ "', '[^,]+', 1, LEVEL) token " + "                 FROM   dual CONNECT BY LEVEL <= Length('"
					+ base + "') - Length(Replace('" + base + "', ',', ''))+ 1) ) ) ");

			if (null != bulkCrewScheduleReportDTO.getGroupIdInclude_exclude()
					&& bulkCrewScheduleReportDTO.getGroupIdInclude_exclude().length() > 0
					&& bulkCrewScheduleReportDTO.getGroupIdInclude_exclude().equalsIgnoreCase("include")) {
				tempStr = bulkCrewScheduleReportDTO.getCrewGroup().replaceAll(",", "','");
				strBuffer.append(" AND  EXISTS " + "  (SELECT 1 " + "  FROM crw_own.crw_grp grp, "
						+ "    crw_own.crw_grp_mem mem " + "  WHERE mem.crew_id  = d.id " + "  AND grp.grp_name  IN ('"
						+ tempStr + "') " + "  AND grp.delete_ind = 0 " + "  AND mem.delete_ind = 0 "
						+ "  AND mem.grp_id     = grp.ID " + "  AND to_date('" + startDate
						+ " 00:00:00','DD-MON-YYYY HH24:MI:SS') BETWEEN mem.eff_from_dt AND mem.eff_to_dt "
						+ "  AND to_date('" + endDate
						+ " 23:59:59','DD-MON-YYYY HH24:MI:SS') BETWEEN mem.eff_from_dt AND mem.eff_to_dt " + "  )");
			}

			else if (null != bulkCrewScheduleReportDTO.getGroupIdInclude_exclude()
					&& bulkCrewScheduleReportDTO.getGroupIdInclude_exclude().length() > 0
					&& bulkCrewScheduleReportDTO.getGroupIdInclude_exclude().equalsIgnoreCase("exclude")) {
				tempStr = bulkCrewScheduleReportDTO.getCrewGroup().replaceAll(",", "','");
				strBuffer.append(" AND NOT EXISTS " + "  (SELECT 1 " + "  FROM crw_own.crw_grp grp, "
						+ "    crw_own.crw_grp_mem mem " + "  WHERE mem.crew_id  = d.id " + "  AND grp.grp_name  IN ('"
						+ tempStr + "') " + "  AND grp.delete_ind = 0 " + "  AND mem.delete_ind = 0 "
						+ "  AND mem.grp_id     = grp.ID "
						/*
						 * + "  AND to_date('" + startDate +
						 * " 00:00:00','DD-MON-YYYY HH24:MI:SS') BETWEEN mem.eff_from_dt AND mem.eff_to_dt "
						 */
						+ "  AND to_date('" + endDate
						+ " 23:59:59','DD-MON-YYYY HH24:MI:SS') BETWEEN mem.eff_from_dt AND mem.eff_to_dt " + "  )");

			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getAircraftType())) {
				if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getAircraftType()))
					tempStr = bulkCrewScheduleReportDTO.getAircraftType();

				strBuffer.append(" AND EXISTS ( SELECT 1 " + " FROM   crw_own.crw_crw_qual q "
						+ " WHERE  q.delete_ind = 0 " + " AND qual_type='A/C Type'" + " AND    d.id = q.crew_id "
						+ " AND    q.eff_from_dt <= l_d2.d2 " + " AND    q.eff_to_dt >= l_d1.d1 " + " AND " + " CASE "
						+ " WHEN '" + tempStr + "' IS NULL THEN 1 " + " WHEN '" + tempStr + "' IS NOT NULL "
						+ " AND    qual_code IN " + " ( " + " SELECT regexp_substr('" + tempStr
						+ "', '[^,]+', 1, level) token " + " FROM   dual connect BY level <= length('" + tempStr
						+ "') - length(replace('" + tempStr + "', ',', '')) + 1 ) THEN 1" + " END = 1 )");

			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getQualification())) {
				if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getQualification()))
					tempStr = bulkCrewScheduleReportDTO.getQualification();

				strBuffer.append(" AND EXISTS ( SELECT 1 " + " FROM   crw_own.crw_crw_qual q "
						+ " WHERE  q.delete_ind = 0 " + " AND qual_type<>'A/C Type'" + " AND    d.id = q.crew_id "
						+ " AND    q.eff_from_dt <= l_d2.d2 " + " AND    q.eff_to_dt >= l_d1.d1 " + " AND " + " CASE "
						+ " WHEN '" + tempStr + "' IS NULL THEN 1 " + " WHEN '" + tempStr + "' IS NOT NULL "
						+ " AND    qual_code IN " + " ( " + " SELECT regexp_substr('" + tempStr
						+ "', '[^,]+', 1, level) token " + " FROM   dual connect BY level <= length('" + tempStr
						+ "') - length(replace('" + tempStr + "', ',', '')) + 1 ) THEN 1" + " END = 1 )");

			}

			strBuffer.append(" ) " 
			+ " SELECT t1.stdt AS \"DAT\", "
					+ "       t2.a1||''||listagg(t2.str|| chr(10)) within GROUP (ORDER BY t1.stdt) \"FLIGHT/ACTIVTY\",    t2.pa_ind,"
					+ "       c.crew_id,c.crew_type,c.last_flet,c.last_rank, c.stf_num, c.dspy_name , c.last_rank_seq ,   t2.acy_cat, t2.plnd_duty_rpt_date_fmt, t2.ntfd_ind ,   t2.acy"
					+ " FROM " 
					+ "  (SELECT b.*, rank() OVER (PARTITION BY crew_id ORDER BY rost_stt_date) rnk, "
					+ "                      CASE " 
					+ "                          WHEN '" + rosterFormat
					+ "' = 'FD' THEN CASE "
					+ "	WHEN item_seq_num = 1 AND sdt > TRUNC (plnd_duty_rpt_date) AND asgn_type = 'P' THEN  CASE WHEN ? = 1 AND nvl(b.acy_cat,'WRK') = 'WRK' THEN 'RPT:' || TO_CHAR (plnd_duty_rpt_date, 'dd-MON-yy hh24:mi') || '|' ELSE null end  "
					+ "                                                  WHEN item_seq_num = 1 AND sdt = TRUNC (plnd_duty_rpt_date) AND asgn_type = 'P'  THEN CASE WHEN ? = 1 AND nvl(b.acy_cat,'WRK') = 'WRK' THEN 'RPT:' || TO_CHAR (plnd_duty_rpt_date, 'hh24:mi') || '|' ELSE null end "
					+ "                                                  WHEN sdt = TRUNC (std) AND asgn_type = 'P' THEN CASE WHEN ? = 1 AND  nvl(b.acy_cat,'WRK') = 'WRK' THEN 'RPT:' || TO_CHAR (plnd_duty_rpt_date, 'hh24:mi') || '|' ELSE null end "
					+ "      WHEN asgn_type = 'A' AND  ?  = 1 " 
					+ "      THEN " 
					+ "        CASE "
					+ "          WHEN b.acy_cat != 'NWK' " 
					+ "          THEN 'RPT:' "
					+ "            || TO_CHAR (plnd_duty_rpt_date, 'hh24:mi') " 
					+ "            || '|' "
					+ "            || flt_num " 
					+ "            || '|' " 
					+ "            || dep_stn "
					+ "            || '|' " 
					+ "            || TO_CHAR (std, 'hh24:mi') " 
					+ "            || '-' "
					+ "            || TO_CHAR (sta, 'hh24:mi') " 
					+ "          ELSE flt_num || '|' " 
					+ "          END "
					+ "      WHEN asgn_type = 'A' AND  ?  = 0 " 
					+ "      THEN " 
					+ "        CASE "
					+ "          WHEN b.acy_cat != 'NWK' " 
					+ "          THEN flt_num " 
					+ "            || '|' "
					+ "            || dep_stn " 
					+ "            || '|' " 
					+ "            || TO_CHAR (std, 'hh24:mi') "
					+ "            || '-' " 
					+ "            || TO_CHAR (sta, 'hh24:mi') "
					+ "          ELSE flt_num || '|' end end " 
					+ "     WHEN '" + rosterFormat+ "' = 'FO' "
					+ "		THEN flt_only " 
					+ "     WHEN '" + rosterFormat+ "' = 'PO' "
					/*+ "		THEN pair_only " */
					
+ "   THEN     CASE "
+ "          WHEN item_seq_num = 1 "
+ "          AND sdt           > TRUNC (plnd_duty_rpt_date) "
+ "          AND asgn_type     = 'P' "
+ "          THEN "
+ "            CASE "
+ "              WHEN ?                   = 1 "
+ "              AND NVL(b.acy_cat,'WRK') = 'WRK' "
+ "              THEN 'RPT:' "
+ "                || TO_CHAR (plnd_duty_rpt_date, 'dd-MON-yy hh24:mi') "
+ "                || '|' "
+ "                || pair_only "
+ "              ELSE pair_only "
+ "            END "
+ "          WHEN item_seq_num = 1 "
+ "          AND sdt           = TRUNC (plnd_duty_rpt_date) "
+ "          AND asgn_type     = 'P' "
+ "          THEN "
+ "            CASE "
+ "              WHEN ?                   = 1 "
+ "              AND NVL(b.acy_cat,'WRK') = 'WRK' "
+ "              THEN 'RPT:' "
+ "                || TO_CHAR (plnd_duty_rpt_date, 'hh24:mi') "
+ "                || '|' "
+ "                || pair_only "
+ "              ELSE pair_only "
+ "            END "
+ "          WHEN sdt      = TRUNC (std) "
+ "          AND asgn_type = 'P' "
+ "          THEN "
+ "            CASE "
+ "              WHEN ?                   = 1 "
+ "              AND NVL(b.acy_cat,'WRK') = 'WRK' "
+ "              THEN 'RPT:' "
+ "                || TO_CHAR (plnd_duty_rpt_date, 'hh24:mi') "
+ "                || '|' "
+ "                || pair_only "
+ "              ELSE pair_only "
+ "            END "
+ "          WHEN asgn_type = 'A' "
+ "          AND ?          = 1 "
+ "          THEN "
+ "            CASE "
+ "              WHEN b.acy_cat != 'NWK' "
+ "              THEN 'RPT:' "
+ "                || TO_CHAR (plnd_duty_rpt_date, 'hh24:mi') "
+ "                || '|' "
+ "                || pair_only "
+ "              ELSE pair_only "
+ "                || '|' "
+ "            END "
+ "          WHEN asgn_type = 'A' "
+ "          AND ?          = 0 "
+ "          THEN "
+ "            CASE "
+ "              WHEN b.acy_cat != 'NWK' "
+ "              THEN pair_only "
+ "              ELSE pair_only "
+ "                || '|' "
+ "            END "
+ "        END"

					+ "                     END a1, " 
					+ "                      CASE "
					+ "                          WHEN '" + rosterFormat
					+ "' = 'FD' THEN CASE WHEN item_type = 'F' THEN flt_num || '|' || dep_stn || '|' || TO_CHAR (std, 'hh24:mi') || '|' || arr_stn || '|' || CASE WHEN TRUNC (sta) = TRUNC (std) THEN TO_CHAR (sta, 'hh24:mi') || '|' "
					+ "                                                                                                                                                                          ELSE TO_CHAR (sta, 'hh24:mi') || '(+' || TO_CHAR (TRUNC (sta) - TRUNC (std)) || ')' || '|' END "
					+ "                                                                                                                                                                  || CASE WHEN act_typ IS NOT NULL AND duty_ind IS NOT NULL THEN'(' || act_typ  || ')'  || '|' "
					+ "                                                                                                                                                                          WHEN act_typ IS NOT NULL AND duty_ind IS NULL THEN  '(' || act_typ  || ')'  || '|' "
					+ "                                                                                                                                                                          WHEN act_typ IS NULL AND duty_ind IS NOT NULL THEN '|' "
					+ "                                                                                                                                                                          WHEN act_typ IS NULL AND duty_ind IS NULL THEN '|' "
					+ "                                                                                                                                                                          END "
					+ "                                                                                                                                                                  || CASE WHEN work_type <> 'OP' THEN work_type || '|'ELSE NULL END "
					+ "                                                                                                                                                                  || CASE WHEN splt_ind = 1 THEN '* ' ELSE NULL END "
					+ "                                                 WHEN item_type IN ('A', 'G') THEN flt_num || ' (' || dep_stn || ')' || CASE WHEN splt_ind = 1 THEN '* 'ELSE NULL END "
					+ "                                             END " 
					+ "                          ELSE NULL "
					+ "                      END str " 
					+ "   FROM "
					+ "     (SELECT a.*, FIRST_VALUE (TRUNC (a.std)) OVER (PARTITION BY pair_id,duty_seq_num ORDER BY std ASC) sdt,LEAD (item_seq_num) OVER (PARTITION BY duty_id ORDER BY item_seq_num) next_item_seq_num "
					+ "      FROM "
					+ "        (SELECT r.crew_id, r.asgn_type,  i.item_type,i.item_ref_id,r.id as rost_id, "
					+ "                CASE " 
					+ "                    WHEN l_mod.ql_mod = 'UTC' "
					+ "					   THEN r.stt_date "
					+ "                    WHEN l_mod.ql_mod = 'Local' "
					+ "   				   THEN r.stt_date + r.stt_Date_vrnc_mins/1440 "
					+ "          		   WHEN l_mod.ql_mod = 'BASE' " 
					+ "                    THEN r.stt_date + " + baseTime + " / 1440 "
					+ "                END rost_stt_date, " 
					+ "                CASE "
					+ "                    WHEN l_mod.ql_mod = 'UTC' "
					+ "					   THEN r.end_date "
					+ "                    WHEN l_mod.ql_mod = 'Local' "
					+ "                    THEN r.end_date + r.end_Date_vrnc_mins/1440 "
					+ "          		   WHEN l_mod.ql_mod = 'BASE' " 
					+ "                    THEN r.end_date + " + baseTime + " / 1440 "
					+ "                END rost_end_date, " 
					+ "                CASE "
					+ "                    WHEN l_mod.ql_mod = 'UTC' "
					+ "					   THEN d.plnd_duty_rpt_date "
					+ "                    WHEN l_mod.ql_mod = 'Local' "
					+ "					   THEN d.plnd_duty_rpt_date + PLND_RPT_VRNC_MINS/1440 "
					+ "          		   WHEN l_mod.ql_mod = 'BASE' " 
					+ "                    THEN d.plnd_duty_rpt_date + " + baseTime + " /1440 "
					+ "                END plnd_duty_rpt_date, " 
					+ "					CASE"
					+ "						WHEN l_mod.ql_mod = 'UTC' THEN TO_CHAR (d.plnd_duty_rpt_date, 'dd-MON-yy hh24:mi')"
					+ "						WHEN l_mod.ql_mod = 'Local' "
					+ "						THEN TO_CHAR ( d.plnd_duty_rpt_date + PLND_RPT_VRNC_MINS/ 1440, 'dd-MON-yy hh24:mi')"
					+ "          		    WHEN l_mod.ql_mod = 'BASE' " 
					+ "                     THEN TO_CHAR ( d.plnd_duty_rpt_date + " + baseTime + "/ 1440, 'dd-MON-yy hh24:mi')"
					+ "					END plnd_duty_rpt_date_fmt, "
					+ "                d.duty_seq_num, "
					+ "				   i.item_seq_num, " 
					+ "                CASE "
					+ "                    WHEN l_mod.ql_mod = 'UTC' "
					+ "					   AND act_est.l_act_est ='Scheduled' "
					+ "					   THEN f.std "
					+ "                    WHEN l_mod.ql_mod = 'UTC' "
					+ "					   AND act_est.l_act_est ='Best' "
					+ "					   THEN f.btd "
					+ "                    WHEN l_mod.ql_mod = 'Local' "
					+ "					   AND act_est.l_act_est ='Scheduled' "
					+ "					   THEN f.std+ f.std_vrnc_mins/1440 "
					+ "                    WHEN l_mod.ql_mod = 'Local' "
					+ "					   AND act_est.l_act_est ='Best' "
					+ "					   THEN f.btd+ f.btd_vrnc_mins/1440 "
					+ "                    WHEN l_mod.ql_mod = 'BASE' "
					+ "					   AND act_est.l_act_est ='Scheduled' "
					+ "					   THEN f.std+ " + baseTime + "/1440 "
					+ "                    WHEN l_mod.ql_mod = 'BASE' "
					+ "					   AND act_est.l_act_est ='Best' "
					+ "					   THEN f.btd+ " + baseTime + "/1440 "
					+ "                END std, " 
					+ "                TRUNC ("
					+ "						CASE "
					+ "                           WHEN l_mod.ql_mod = 'UTC' "
					+ "							  AND act_est.l_act_est ='Scheduled' "
					+ "							  THEN f.std "
					+ "                           WHEN l_mod.ql_mod = 'UTC' "
					+ "						      AND act_est.l_act_est ='Best' "
					+ "							  THEN f.btd "
					+ "                           WHEN l_mod.ql_mod = 'Local' "
					+ "							  AND act_est.l_act_est ='Scheduled' "
					+ "							  THEN f.std+ f.std_vrnc_mins/1440 "
					+ "                           WHEN l_mod.ql_mod = 'Local' "
					+ "							  AND act_est.l_act_est ='Best' "
					+ "							  THEN f.btd+ f.btd_vrnc_mins/1440 "
					+ "                    		  WHEN l_mod.ql_mod = 'BASE' "
					+ "					   		  AND act_est.l_act_est ='Scheduled' "
					+ "					   		  THEN f.std+ " + baseTime + "/1440 "
					+ "                   		  WHEN l_mod.ql_mod = 'BASE' "
					+ "					   		  AND act_est.l_act_est ='Best' "
					+ "					   		  THEN f.btd+ " + baseTime + "/1440 "
					+ "                       END) t_std, " 
					+ "                CASE "
					+ "                    WHEN car_code = (select cod_val from mst_own.mst_codeval where cod_id=(select cod_id from mst_own.mst_code where cod_name='CRW.DFLT_AIRLINE_CODE')) "
					+ "					   THEN f.flt_num "
					+ "                    ELSE car_code || flt_num " 
					+ "                END flt_num, "
					+ "                i.work_type,"
					+ "				   f.act_typ,  "
					+ "               (SELECT duty_ind FROM crw_own.crw_duty_ind WHERE rost_id = r.ID AND delete_ind = 0 AND ROWNUM = 1) duty_ind, "
					+ "                i.splt_ind,"
					+ "				   f.dep_stn,"
					+ "				   f.arr_stn, " 
					+ "                CASE "
					+ "                    WHEN l_mod.ql_mod = 'UTC' "
					+ "					   AND act_est.l_act_est ='Scheduled' "
					+ "					   THEN f.sta "
					+ "                    WHEN l_mod.ql_mod = 'UTC' "
					+ "					   AND act_est.l_act_est ='Best' "
					+ "					   THEN f.bta "
					+ "                    WHEN l_mod.ql_mod = 'Local' "
					+ "					   AND act_est.l_act_est ='Scheduled' "
					+ "					   THEN f.sta + f.sta_vrnc_mins/1440 "
					+ "                    WHEN l_mod.ql_mod = 'Local' "
					+ "					   AND act_est.l_act_est ='Best' "
					+ "					   THEN f.bta+ f.bta_vrnc_mins/1440 "
					+ "                    WHEN l_mod.ql_mod = 'BASE' "
					+ "					   AND act_est.l_act_est ='Scheduled' "
					+ "					   THEN f.sta+ " + baseTime + "/1440 "
					+ "                    WHEN l_mod.ql_mod = 'BASE' "
					+ "					   AND act_est.l_act_est ='Best' "
					+ "					   THEN f.bta+ " + baseTime + "/1440 "
					+ "                END sta, "
					+ "                p.ID AS pair_id, "
					+ "				   d.ID AS duty_id, "
					+ "				   i.ID AS item_id, "
					+ "				   f.car_code || f.flt_num flt_only, "
					+ "				   p.pair_num pair_only , "
					+ "				  'WRK' acy_cat , "
					+ "				   CASE "
					+ "						WHEN r.ack_date is null "
					+ "						THEN 'UN' ELSE null "
					+ "				   END ntfd_ind , "
					+ "  			   CASE "
					+ "						WHEN r.pre_asgn_ind = 1 "
					+ "						THEN 'PA' "
					+ "						ELSE null "
					+ "				   END as pa_ind , "
					+ "				  'False' acy"
					+ "                FROM crw_own.crw_rost r, " 
					+ "                crw_own.crw_pair p, "
					+ "                crw_own.crw_pair_duty d, " 
					+ "                crw_own.crw_pair_duty_item i, "
					+ "                crw_own.crw_flt f, " 
					+ "             (SELECT '" + timesIn
					+ "' ql_mod FROM dual) l_mod, " 
					+ "             (SELECT '" + startDate + "' d1 FROM dual) l_d1, "
					+ "             (SELECT to_date('" + endDate
					+ " 23:59:59','DD-MON-YYYY HH24:MI:SS') d2 FROM dual) l_d2, " 
					+ "              crwid,"
					+ " (SELECT '" + flightTimes + "' as l_act_est FROM dual) act_est      "
					+ "           WHERE r.delete_ind = 0 " 
					+ "           AND p.delete_ind = 0 "
					+ "           AND d.delete_ind = 0 " 
					+ "           AND i.delete_ind = 0 "
					+ "           AND f.delete_ind = 0 " 
					+ "           AND r.crew_id = crwid.crew_id "
					+ "           AND r.asgn_ref_id = p.ID " 
					+ "           AND r.asgn_type = 'P' "
					+ "           AND i.item_type = 'F' " 
					+ "           AND i.item_ref_id = f.ID "
					+ "           AND p.ID = d.pair_id " 
					+ "           AND d.ID = i.duty_id "
					
					
					+ "     AND  ((l_mod.ql_mod = 'UTC' AND r.stt_date BETWEEN to_date('" + startDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5 )"
					+ " or"
					+ " 	(l_mod.ql_mod = 'Local' AND r.stt_date + (nvl(r.stt_date_vrnc_mins,0) / 1440) BETWEEN to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)"
					+ " or"
					+ "     (l_mod.ql_mod = 'BASE' AND r.stt_date + (NVL(" + baseTime + " ,0) / 1440) BETWEEN to_date('" + startDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)) "

					
					+ "         UNION ALL "
					+ "			SELECT r.crew_id, " 
					+ "                          r.asgn_type, "
					+ "                          i.item_type, "
					+ "                          i.item_ref_id,r.id as rost_id, " 
					+ "                          CASE "
					+ "                              WHEN l_mod.ql_mod = 'UTC' "
					+ "								 THEN r.stt_date "
					+ "                              WHEN l_mod.ql_mod = 'Local' "
					+ "								 THEN r.stt_date + r.stt_date_vrnc_mins/1440 "
					+ "          		   			 WHEN l_mod.ql_mod = 'BASE' " 
					+ "                    			 THEN r.stt_date + " + baseTime + " /1440 "
					+ "                          END rost_stt_date, " 
					+ "                          CASE "
					+ "                              WHEN l_mod.ql_mod = 'UTC' "
					+ "								 THEN r.end_date "
					+ "                              WHEN l_mod.ql_mod = 'Local' "
					+ "								 THEN r.end_date + r.end_date_vrnc_mins/1440 "
					+ "          		   			 WHEN l_mod.ql_mod = 'BASE' " 
					+ "                    			 THEN r.end_date + " + baseTime + " /1440 "
					+ "                          END rost_end_date, " 
					+ "                          CASE "
					+ "                              WHEN l_mod.ql_mod = 'UTC' "
					+ "								 THEN d.plnd_duty_rpt_date "
					+ "                              WHEN l_mod.ql_mod = 'Local' "
					+ "								 THEN d.plnd_duty_rpt_date + PLND_RPT_VRNC_MINS/1440 "
					+ "          		             WHEN l_mod.ql_mod = 'BASE' " 
					+ "                              THEN d.plnd_duty_rpt_date + " + baseTime + " /1440 "
					+ "                          END plnd_duty_rpt_date, " 
					+ "							 CASE"
					+ "								 WHEN l_mod.ql_mod = 'UTC' "
					+ "								 THEN TO_CHAR (d.plnd_duty_rpt_date, 'dd-MON-yy hh24:mi')"
					+ "								 WHEN l_mod.ql_mod = 'Local' "
					+ "								 THEN TO_CHAR ( d.plnd_duty_rpt_date + PLND_RPT_VRNC_MINS/ 1440, 'dd-MON-yy hh24:mi')"
					+ "          		   			 WHEN l_mod.ql_mod = 'BASE' " 
					+ "                    			 THEN TO_CHAR ( d.plnd_duty_rpt_date + " + baseTime + " / 1440, 'dd-MON-yy hh24:mi')"
					+ "							 END plnd_duty_rpt_date_fmt, "
					+ "                          d.duty_seq_num, " 
					+ "                          i.item_seq_num, "
					+ "                          CASE "
					+ "                              WHEN l_mod.ql_mod = 'UTC' "
					+ "								 THEN a.stt_date "
					+ "                              WHEN l_mod.ql_mod = 'Local' "
					+ "								 THEN a.stt_date + a.stt_date_vrnc_mins/1440 "
					+ "          		             WHEN l_mod.ql_mod = 'BASE' " 
					+ "                              THEN  a.stt_date + " + baseTime + " /1440 "
					+ "                          END stt_date, " 
					+ "                          TRUNC ("
					+ "							 CASE "
					+ "                              WHEN l_mod.ql_mod = 'UTC' "
					+ "								 THEN a.stt_date "
					+ "                              WHEN l_mod.ql_mod = 'Local' "
					+ "								 THEN a.stt_date + a.stt_date_vrnc_mins/1440 "
					+ "          		             WHEN l_mod.ql_mod = 'BASE' " 
					+ "                              THEN a.stt_date + " + baseTime + " /1440 "
					+ "                          END) t_std, " 
					+ "                          a.acy_code, "
					+ "                          i.work_type, " 
					+ "                          NULL AS act_typ, " 
					+ "           (SELECT duty_ind " 
					+ "            FROM crw_own.crw_duty_ind "
					+ "            WHERE rost_id = r.ID " 
					+ "              AND delete_ind = 0 "
					+ "              AND ROWNUM = 1) duty_ind, " 
					+ "                          i.splt_ind, "
					+ "                          a.acy_lcn, " 
					+ "                          a.acy_lcn, "
					+ "                          CASE "
					+ "                              WHEN l_mod.ql_mod = 'UTC' "
					+ "								 THEN a.end_date "
					+ "                              WHEN l_mod.ql_mod = 'Local' "
					+ "								 THEN a.end_date + a.end_Date_vrnc_mins/1440 "
					+ "          		             WHEN l_mod.ql_mod = 'BASE' " 
					+ "                              THEN a.end_date + " + baseTime + " /1440 "
					+ "                          END end_date, " 
					+ "                          p.ID AS pair_id, "
					+ "                          d.ID AS duty_id, " 
					+ "                          i.ID AS item_id, "
					+ "                          a.acy_code flt_only, "
					+ "                          p.pair_num pair_only, "
					+ "							 a.acy_cat , "
					+ "							 CASE "
					+ "								 WHEN r.ack_date is null "
					+ "								 THEN 'UN' "
					+ "								 ELSE null "
					+ "							 END ntfd_ind , "
					+ "							 CASE "
					+ "								 WHEN r.pre_asgn_ind = 1 "
					+ "								 THEN 'PA' "
					+ "								 ELSE null "
					+ "							 end as pa_ind , "
					+ "							'False' acy"
					+ "         FROM crw_own.crw_rost r, " 
					+ "              crw_own.crw_pair p, "
					+ "              crw_own.crw_pair_duty d, " 
					+ "              crw_own.crw_pair_duty_item i, "
					+ "              crw_own.crw_acy a, " 
					+ "           (SELECT '" + timesIn + "' ql_mod "
					+ "            FROM dual) l_mod, " + " " 
					+ "           (SELECT '" + startDate + "' d1 "
					+ "            FROM dual) l_d1, " + " " 
					+ "           (SELECT to_date('" + endDate
					+ " 23:59:59','DD-MON-YYYY HH24:MI:SS') d2 " 
					+ "            FROM dual) l_d2, "
					+ "              crwid " 
					+ "         WHERE r.delete_ind = 0 " 
					+ "           AND p.delete_ind = 0 "
					+ "           AND d.delete_ind = 0 " 
					+ "           AND i.delete_ind = 0 "
					+ "           AND a.delete_ind = 0 " 
					+ "           AND r.crew_id = crwid.crew_id "
					+ "           AND r.asgn_ref_id = p.ID " 
					+ "           AND r.asgn_type = 'P' "
					+ "           AND i.item_type = 'A' " 
					+ "           AND i.item_ref_id = a.ID "
					+ "           AND p.ID = d.pair_id " 
					+ "           AND d.ID = i.duty_id "
					
					+ "     AND  ((l_mod.ql_mod = 'UTC' AND r.stt_date BETWEEN to_date('" + startDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5 )"
					+ " or"
					+ " 	(l_mod.ql_mod = 'Local' AND r.stt_date + (nvl(r.stt_date_vrnc_mins,0) / 1440) BETWEEN to_date('" + startDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)"
					+ " or"
					+ "     (l_mod.ql_mod = 'BASE' AND r.stt_date + (NVL(" + baseTime + " ,0) / 1440) BETWEEN to_date('" + startDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5 )) "
					
					+ "         UNION ALL "
					
					+ "					  SELECT r.crew_id, "
					+ "                          r.asgn_type, " 
					+ "                          i.item_type, "
					+ "                          i.item_ref_id,"
					+ "							 r.id as rost_id, " 
					+ "                          CASE "
					+ "                              WHEN l_mod.ql_mod = 'UTC' "
					+ "								 THEN r.stt_date "
					+ "                              WHEN l_mod.ql_mod = 'Local' "
					+ "								 THEN r.stt_date + r.stt_date_vrnc_mins/1440 "
					+ "          		             WHEN l_mod.ql_mod = 'BASE' " 
					+ "                              THEN r.stt_date + " + baseTime + " /1440 "
					+ "                          END rost_stt_date, " 
					+ "                          CASE "
					+ "                              WHEN l_mod.ql_mod = 'UTC' "
					+ "								 THEN r.end_date "
					+ "                              WHEN l_mod.ql_mod = 'Local' "
					+ "								 THEN r.end_date + r.end_date_vrnc_mins/1440 "
					+ "          		             WHEN l_mod.ql_mod = 'BASE' " 
					+ "                              THEN r.end_date + " + baseTime + " /1440 "
					+ "                          END rost_end_date, " 
					+ "                          CASE "
					+ "                              WHEN l_mod.ql_mod = 'UTC' "
					+ "								 THEN d.plnd_duty_rpt_date "
					+ "                              WHEN l_mod.ql_mod = 'Local' "
					+ "								 THEN d.plnd_duty_rpt_date + PLND_RPT_VRNC_MINS/1440 "
					+ "          		             WHEN l_mod.ql_mod = 'BASE' " 
					+ "                              THEN d.plnd_duty_rpt_date + " + baseTime + "/1440 "
					+ "                          END plnd_duty_rpt_date, " 
					+ "							 CASE"
					+ "								 WHEN l_mod.ql_mod = 'UTC' "
					+ "								 THEN TO_CHAR (d.plnd_duty_rpt_date, 'dd-MON-yy hh24:mi')"
					+ "								 WHEN l_mod.ql_mod = 'Local' "
					+ "								 THEN TO_CHAR ( d.plnd_duty_rpt_date + PLND_RPT_VRNC_MINS/ 1440, 'dd-MON-yy hh24:mi')"
					+ "          		             WHEN l_mod.ql_mod = 'BASE' " 
					+ "                              THEN TO_CHAR ( d.plnd_duty_rpt_date + " + baseTime + "/ 1440, 'dd-MON-yy hh24:mi')"
					+ "							 END plnd_duty_rpt_date_fmt, "
					+ "                          d.duty_seq_num, " 
					+ "                          i.item_seq_num, "
					+ "                          CASE "
					+ "                              WHEN l_mod.ql_mod = 'UTC' "
					+ "								 THEN g.stt_date "
					+ "                              WHEN l_mod.ql_mod = 'Local' "
					+ "								 THEN g.stt_date + g.stt_vrnc_mins/1440 "
					+ "          		             WHEN l_mod.ql_mod = 'BASE' " 
					+ "                              THEN g.stt_date + " + baseTime + "/1440 "
					+ "                          END stt_date, " 
					+ "                          TRUNC ("
					+ "							 CASE "
					+ "                               WHEN l_mod.ql_mod = 'UTC' "
					+ "								  THEN g.stt_date "
					+ "                               WHEN l_mod.ql_mod = 'Local' "
					+ "								  THEN g.stt_date + g.stt_vrnc_mins/1440 "
					+ "          		              WHEN l_mod.ql_mod = 'BASE' " 
					+ "                               THEN g.stt_date + " + baseTime + "/1440 "
					+ "                          END) t_std, " 
					+ "                          g.trsp_type, "
					+ "                          i.work_type, " 
					+ "                          NULL AS act_typ,  " 
					+ " "
					+ "           (SELECT duty_ind " 
					+ "            FROM crw_own.crw_duty_ind "
					+ "            WHERE rost_id = r.ID " 
					+ "              AND delete_ind = 0 "
					+ "              AND ROWNUM = 1) duty_ind, " 
					+ "                          i.splt_ind, "
					+ "                          g.orig, " 
					+ "                          g.dest, "
					+ "                          CASE "
					+ "                              WHEN l_mod.ql_mod = 'UTC' "
					+ "								 THEN g.end_date "
					+ "                              WHEN l_mod.ql_mod = 'Local' "
					+ "								 THEN g.end_date + g.end_vrnc_mins/1440 "
					+ "          		             WHEN l_mod.ql_mod = 'BASE' " 
					+ "                              THEN g.end_date + " + baseTime + "/1440 "
					+ "                          END end_date, " 
					+ "                          p.ID AS pair_id, "
					+ "                          d.ID AS duty_id, " 
					+ "                          i.ID AS item_id, "
					+ "                          g.trsp_type flt_only, "
					+ "                          p.pair_num pair_only,"
					+ "							 NULL acy_cat ,  "
					+ "							 CASE "
					+ "								 WHEN r.ack_date is null "
					+ "								 THEN 'UN' "
					+ "								 ELSE null "
					+ "							 end ntfd_ind  , "
					+ "							 CASE "
					+ "								 WHEN r.pre_asgn_ind = 1 "
					+ "								 THEN 'PA' "
					+ "								 ELSE null "
					+ "							 end as pa_ind , "
					+ "							 'False' acy"
					+ "         FROM crw_own.crw_rost r, " 
					+ "              crw_own.crw_pair p, "
					+ "              crw_own.crw_pair_duty d, " 
					+ "              crw_own.crw_pair_duty_item i, "
					+ "              crw_own.crw_grnd_mvt g, " 
					+ " " + "           (SELECT '" + timesIn + "' ql_mod "
					+ "            FROM dual) l_mod, " + " " 
					+ "           (SELECT '" + startDate + "' d1 "
					+ "            FROM dual) l_d1, " + " " 
					+ "           (SELECT to_date('" + endDate
					+ " 23:59:59','DD-MON-YYYY HH24:MI:SS') d2 " 
					+ "            FROM dual) l_d2, "
					+ "              crwid " 
					+ "           WHERE r.delete_ind = 0 " 
					+ "           AND p.delete_ind = 0 "
					+ "           AND d.delete_ind = 0 " 
					+ "           AND i.delete_ind = 0 "
					+ "           AND g.delete_ind = 0 " 
					+ "           AND r.crew_id = crwid.crew_id "
					+ "           AND r.asgn_ref_id = p.ID " 
					+ "           AND r.asgn_type = 'P' "
					+ "           AND i.item_type = 'G' " 
					+ "           AND i.item_ref_id = g.ID "
					+ "           AND p.ID = d.pair_id " 
					+ "           AND d.ID = i.duty_id "
					
					+ "     AND  ((l_mod.ql_mod = 'UTC' AND r.stt_date BETWEEN to_date('" + startDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)"
					+ " or"
					+ " 	(l_mod.ql_mod = 'Local' AND r.stt_date + (nvl(r.stt_date_vrnc_mins,0) / 1440) BETWEEN to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)"
					+ " or"
					+ "     (l_mod.ql_mod = 'BASE' AND r.stt_date + (NVL(" + baseTime + " ,0) / 1440) BETWEEN to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)) "

					
					+ "         UNION ALL "
					
					+ "					  SELECT r.crew_id, " 
					+ "                          r.asgn_type, "
					+ "                          NULL AS item_type, "
					+ "                          NULL AS item_ref_id,"
					+ "							 r.id as rost_id, "
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 0 " 
					+ "          THEN r.stt_date "
					+ "			 WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 1"
					+ "			 THEN r.stt_date + r.stt_date_vrnc_mins / 1440"
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN r.stt_date + r.stt_date_vrnc_mins / 1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' " 
					+ "          THEN r.stt_date + " + baseTime + " / 1440 "
					+ "        END rost_stt_date, " 
					
					+ "        CASE " 
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 0"
					+ "          THEN r.end_date " 
					+ "			 WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 1"
					+ "			 THEN r.end_date + r.end_date_vrnc_mins / 1440"
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN r.end_date + r.end_date_vrnc_mins / 1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' " 
					+ "          THEN r.end_date + " + baseTime + " / 1440 "
					+ "        END rost_end_date, " 
					
					+ "        CASE " 
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 0"
					+ "          THEN r.stt_date " 
					+ "			 WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 1"
					+ "			 THEN r.stt_date + r.stt_date_vrnc_mins / 1440"
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN r.stt_date + r.stt_Date_vrnc_mins/1440 " 
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN r.stt_date + " + baseTime + " / 1440 " 
					+ "        END plnd_duty_rpt_date, "
					+ "		   CASE"
					+ "			 WHEN l_mod.ql_mod = 'UTC' "
					+ "			 THEN TO_CHAR (r.stt_date, 'dd-MON-yy hh24:mi')"
					+ "			 WHEN l_mod.ql_mod = 'Local' "
					+ "			 THEN TO_CHAR ( r.stt_date + r.stt_Date_vrnc_mins / 1440, 'dd-MON-yy hh24:mi')"
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN TO_CHAR ( r.stt_date + " + baseTime + " / 1440, 'dd-MON-yy hh24:mi')"
					+ "		   END plnd_duty_rpt_date_fmt, "
					+ "        NULL AS duty_seq_num, "
					+ "        NULL AS item_seq_num, " 
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' AND a.full_day_ind = 0" 
					+ "          THEN a.stt_date "
					+ "			 WHEN l_mod.ql_mod = 'UTC' AND a.full_day_ind = 1"
					+ "			 THEN a.stt_date + a.stt_date_vrnc_mins / 1440"
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN a.stt_date + a.stt_date_vrnc_mins / 1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' " 
					+ "          THEN a.stt_date + " + baseTime + " / 1440 "
					+ "        END stt_date, " 
					+ "        TRUNC ( " 
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 0" 
					+ "          THEN a.stt_date "
					+ "			 WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 1"
					+ "			 THEN a.stt_date + a.stt_date_vrnc_mins / 1440"
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN a.stt_date + a.stt_date_vrnc_mins / 1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' " 
					+ "          THEN a.stt_date + " + baseTime + " / 1440 "
					+ "        END) t_std, " 
					+ "        a.acy_code, "
					+ "        NULL AS work_type, " 
					+ "        NULL AS act_typ, "
					+ "        (SELECT duty_ind " 
					+ "            FROM crw_own.crw_duty_ind "
					+ "            WHERE rost_id = r.ID " 
					+ "              AND delete_ind = 0 "
					+ "              AND ROWNUM = 1) duty_ind, " 
					+ "                          NULL AS splt_ind, "
					+ "                          a.acy_lcn, " 
					+ "                          a.acy_lcn, "
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 0" 
					+ "          THEN a.end_date "
					+ "			 WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 1"
					+ "			 THEN a.end_date + a.end_date_vrnc_mins / 1440"
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN a.end_date + a.end_date_vrnc_mins / 1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' " 
					+ "          THEN a.end_date + " + baseTime + " / 1440 "
					+ "        END end_date, " 
					+ "        NULL AS pair_id, "
					+ "        NULL AS duty_id, " 
					+ "        NULL AS item_id, "
					+ "        a.acy_code flt_only, "
					+ "        a.acy_code pair_only ,"
					+ "		   a.acy_cat,  "
					+ "		   CASE "
					+ "			 WHEN r.ack_date is null "
					+ "			 THEN 'UN' "
					+ "			 ELSE null "
					+ "		   END ntfd_ind , "
					+ "		   CASE "
					+ "			 WHEN r.pre_asgn_ind = 1 "
					+ "			 THEN 'PA' "
					+ "			 ELSE null "
					+ "		   end as pa_ind , "
					+ "		   'True' acy"
					+ "         FROM crw_own.crw_rost r, " 
					+ "              crw_own.crw_acy a, " 
					+ "           (SELECT '" + timesIn + "' ql_mod " 
					+ "            FROM dual) l_mod, " + " "
					+ "           (SELECT '" + startDate + "' d1 " 
					+ "            FROM dual) l_d1, " + " "
					+ "           (SELECT to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') d2 "
					+ "            FROM dual) l_d2, " 
					+ "              crwid " 
					+ "           WHERE r.asgn_type = 'A' "
					+ "           AND r.asgn_ref_id = a.ID " 
					+ "           AND r.delete_ind = 0 "
					+ "           AND a.delete_ind = 0 " 
					+ "           AND r.crew_id = crwid.crew_id "
					
					+ "     AND  ((l_mod.ql_mod = 'UTC' AND a.full_day_ind = 0 AND r.stt_date BETWEEN to_date('" + startDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5 )"
					+ " or"
					+ "    (l_mod.ql_mod = 'UTC' AND a.full_day_ind = 1 AND r.stt_date + (nvl(r.stt_date_vrnc_mins,0) / 1440) BETWEEN to_date('" + startDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)"
					+ " or"
					+ " 	(l_mod.ql_mod = 'Local' AND r.stt_date + (nvl(r.stt_date_vrnc_mins,0) / 1440) BETWEEN to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)"
					+ " or"
					+ "     (l_mod.ql_mod = 'BASE' AND r.stt_date + (NVL(" + baseTime + " ,0) / 1440) BETWEEN to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS')- 5  AND to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5 )) "
				
					+ ") "
					+ "  a)b)t2, " + " " 
					+ "  (SELECT 1 t_c, "
					+ "          l_d1.d1 + ROWNUM - 1 stdt " 
					+ "   FROM all_objects, " 
					+ " " + "     (SELECT to_date('"
					+ startDate + "','dd-mon-yyyy') d1 " 
					+ "      FROM dual) l_d1, " + " " + "     (SELECT to_date('"
					+ endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') d2 " 
					+ "      FROM dual) l_d2 "
					+ "   WHERE l_d1.d1 + ROWNUM <= l_d2.d2 + 1)t1, " 
					+ "     crwid c " 
					+ "  WHERE t1.stdt = t2.t_std(+) "
					+ "  AND t1.t_c = c.t_c " 
					+ "  AND c.crew_id = t2.crew_id(+) "
					+ "  AND t1.stdt (+) >= c.eff_from_dt " 
					+ "  AND t1.stdt (+) <= c.eff_to_dt  "
					+ "  GROUP BY t1.stdt, t2.a1, c.crew_id, c.crew_type, c.last_flet,c.last_rank,c.stf_num,c.dspy_name , c.last_rank_seq , t2.acy_cat, t2.plnd_duty_rpt_date_fmt, t2.ntfd_ind ,t2.pa_ind ,     t2.acy ");

			addSortParams(strBuffer, bulkCrewScheduleReportDTO);
			preparedStatement = connection.prepareStatement(strBuffer.toString());

			preparedStatement.setString(1, showReportTime);
			preparedStatement.setString(2, showReportTime);
			preparedStatement.setString(3, showReportTime);
			preparedStatement.setString(4, showReportTime);
			preparedStatement.setString(5, showReportTime);
			preparedStatement.setString(6, showReportTime);
			preparedStatement.setString(7, showReportTime);
			preparedStatement.setString(8, showReportTime);
			preparedStatement.setString(9, showReportTime);
			preparedStatement.setString(10, showReportTime);

			setTime = System.currentTimeMillis();
			resultSet = preparedStatement.executeQuery();

			setTime2 = System.currentTimeMillis() - setTime;
			System.out.println("Bulk Crew Schedule  Report --> Time Taken to fetch the Bulk Crew Schedule- ResultSet: "
					+ setTime2);
			String oldCrewId = null;
			setTime = System.currentTimeMillis();

			while (resultSet.next()) {

				if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.CRW_DTL))) {
					crewId = resultSet.getString(BulkCrewScheduleReportTable.CRW_DTL);

					if (previousCrewId.equals("")) {
						bulkCrewScheduleReportSO = new BulkCrewScheduleReportSO();
						bulkCrewScheduleReportSO.setCrewDate(datesInRange2);
						bulkCrewScheduleReportSO.setFleet(resultSet.getString(BulkCrewScheduleReportTable.FLEET));
						bulkCrewScheduleReportSO.setRank(resultSet.getString(BulkCrewScheduleReportTable.RANK));
						bulkCrewScheduleReportSO
								.setCrewType(resultSet.getString(BulkCrewScheduleReportTable.CREW_TYPE));
						bulkCrewScheduleReportSO
								.setStaffName(resultSet.getString(BulkCrewScheduleReportTable.STF_NAME));
						bulkCrewScheduleReportSO
								.setStaffNumber(resultSet.getString(BulkCrewScheduleReportTable.STF_NUM));

					} else if (!previousCrewId.equals(crewId)) {
						bulkSOMap.put(oldCrewId, bulkCrewScheduleReportSO);
						// bulkCrewScheduleReportSOList.add(bulkCrewScheduleReportSO);
						bulkCrewScheduleReportSO = new BulkCrewScheduleReportSO();
						bulkCrewScheduleReportSO.setCrewDate(datesInRange2);
						bulkCrewScheduleReportSO.setCrewDetails(crewId);
						bulkCrewScheduleReportSO.setFleet(resultSet.getString(BulkCrewScheduleReportTable.FLEET));
						bulkCrewScheduleReportSO.setRank(resultSet.getString(BulkCrewScheduleReportTable.RANK));
						bulkCrewScheduleReportSO
								.setCrewType(resultSet.getString(BulkCrewScheduleReportTable.CREW_TYPE));
						bulkCrewScheduleReportSO
								.setStaffName(resultSet.getString(BulkCrewScheduleReportTable.STF_NAME));
						bulkCrewScheduleReportSO
								.setStaffNumber(resultSet.getString(BulkCrewScheduleReportTable.STF_NUM));

					}

					String date = resultSet.getString(BulkCrewScheduleReportTable.DATE);
					Date dateFormat1 = myFormat.parse(date);

					String finalDate = myFormat2.format(dateFormat1);
					finalDate = finalDate.substring(0, finalDate.length() - 3);
					String prevDateNtfd = null;
					String prevDatePA = null;

					if (!CollectionUtils.isEmpty(datesInRange)) {
						String index = Integer.toString(getIndexFromDateRange(datesInRange, finalDate));

						if ("True".equals(resultSet.getString("ACY")))
							bulkCrewScheduleReportSO.setShowDailyDHD(index, "false");
						else if ("False".equals(resultSet.getString("ACY")))
							bulkCrewScheduleReportSO.setShowDailyDHD(index, "true");
						/*
						 * else if
						 * (StringUtils.isEmpty(resultSet.getString("ACY")))
						 * bulkCrewScheduleReportSO.setShowDailyDHD(index,
						 * "true");
						 */
						bulkCrewScheduleReportSO.setActivityCategory(index, resultSet.getString("ACY"));

						if (!StringUtils.isEmpty(resultSet.getString("ACY_CAT")))
							bulkCrewScheduleReportSO.setActivityCat(index, resultSet.getString("ACY_CAT"));
						if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.FLT_ACY).trim())) {

							bulkCrewScheduleReportSO.setCrewSchedule(index,
									resultSet.getString(BulkCrewScheduleReportTable.FLT_ACY).trim().replace("|", "\n"));

							if (showNotifTime && !StringUtils.isEmpty(resultSet.getString("NTFD_IND"))
									&& "UN".equals(resultSet.getString("NTFD_IND"))) {
								if (null == prevDateNtfd || !prevDateNtfd.equals(finalDate))
									bulkCrewScheduleReportSO.setNotifIndicators(index, resultSet.getString("NTFD_IND"));
								prevDateNtfd = finalDate;
							}
							if (showPA && !StringUtils.isEmpty(resultSet.getString("pa_ind"))) {
								if (null == prevDatePA || !prevDatePA.equals(finalDate))
									bulkCrewScheduleReportSO.setPAIndicators(index, resultSet.getString("pa_ind"));
								prevDatePA = finalDate;
							}
						}
					}

					bulkCrewScheduleReportSO.setFleet(resultSet.getString(BulkCrewScheduleReportTable.FLEET));
					bulkCrewScheduleReportSO.setRank(resultSet.getString(BulkCrewScheduleReportTable.RANK));

					oldCrewId = previousCrewId = crewId;
				}

			}
			bulkSOMap.put(crewId, bulkCrewScheduleReportSO);
		}

		catch (Exception e) {
			bulkCrewScheduleReportSO.setCrewDate(datesInRange);
			bulkSOMap.put(crewId, bulkCrewScheduleReportSO);
			e.printStackTrace();
		} finally

		{
			try {
				close(connection, preparedStatement, resultSet);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		long setTime3 = System.currentTimeMillis() - setTime;
		System.out.println(
				"Bulk Crew Schedule  Report --> Time Taken to process AND return the Bulk Crew Schedule- ResultSet: "
						+ setTime3);
		return bulkSOMap;

	}

	/// Result Set fetching for Published Roster
	private Map<String, BulkCrewScheduleReportSO> getBulkCrewScheduleReportListPublished(List<String> datesInRange,
			List<String> datesInRange2, BulkCrewScheduleReportDTO bulkCrewScheduleReportDTO) {

		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		String previousCrewId = "";
		Connection connection = null;
		String startDate = null;
		String endDate = null;
		String staffNumberTempStr = null;
		String rankTempStr = null;
		String fleetTempStr = null;
		String crewTypeTempStr = null;
		String rosterFormat = null;
		String timesIn = null;
		String tempStr = null;
		String base = null;
		String flightTimes = null;
		String showReportTime = "0";
		Boolean showNotifTime = false;
		Boolean showPA = false;
		String crewId = null;
		long setTime2 = 0;
		long setTime = 0;
		long baseTime = 0;
		BulkCrewScheduleReportSO bulkCrewScheduleReportSO = new BulkCrewScheduleReportSO();

		Map<String, BulkCrewScheduleReportSO> bulkSOMap = new LinkedHashMap<>();

		try {

			System.out.println("------------Entering Bulk Crew Schedule Data Set -- Published ---------------");
			connection = getConnection();
			StringBuffer strBuffer = new StringBuffer();

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getStaffNumber())
					&& bulkCrewScheduleReportDTO.getStaffNumber().length() > 0) {
				staffNumberTempStr = "'" + bulkCrewScheduleReportDTO.getStaffNumber() + "'";
			} else {
				staffNumberTempStr = "NULL";
			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getRank())
					&& bulkCrewScheduleReportDTO.getRank().length() > 0) {
				rankTempStr = "'" + bulkCrewScheduleReportDTO.getRank() + "'";
			} else {
				rankTempStr = "NULL";
			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getFleet())
					&& bulkCrewScheduleReportDTO.getFleet().length() > 0) {
				fleetTempStr = "'" + bulkCrewScheduleReportDTO.getFleet() + "'";
			} else {
				fleetTempStr = "NULL";
			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getCrewType())
					&& bulkCrewScheduleReportDTO.getCrewType().length() > 0) {
				crewTypeTempStr = "'" + bulkCrewScheduleReportDTO.getCrewType() + "'";
			} else {
				crewTypeTempStr = "NULL";
			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getFlightTimesIn())
					&& bulkCrewScheduleReportDTO.getFlightTimesIn().length() > 0) {
				flightTimes = bulkCrewScheduleReportDTO.getFlightTimesIn();
			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getReportTime())
					&& "true".equals(bulkCrewScheduleReportDTO.getReportTime())) {
				showReportTime = "1";
			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getNotifIndicator())
					&& "true".equals(bulkCrewScheduleReportDTO.getNotifIndicator())) {
				showNotifTime = true;

			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getPreasgnIndicator())
					&& "true".equals(bulkCrewScheduleReportDTO.getPreasgnIndicator())) {
				showPA = true;
			}

			/// ------MANDatory Fields from UI----//
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getRosterFormat())
					&& bulkCrewScheduleReportDTO.getRosterFormat().length() > 0) {
				rosterFormat = bulkCrewScheduleReportDTO.getRosterFormat();
			}
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getTimesIn())
					&& bulkCrewScheduleReportDTO.getTimesIn().length() > 0) {
				if ("DOH".equalsIgnoreCase(bulkCrewScheduleReportDTO.getTimesIn())) {
/*					String baseStr = personalCrewScheduleReportDTO.getBaseValue();
					String timeDiff = baseStr.substring(baseStr.indexOf('(') + 1, baseStr.indexOf(')')).replace('.',
							':');
					String[] timeDiffArr = timeDiff.split(":");*/
					baseTime = 180;
					//timesIn = personalCrewScheduleReportDTO.getTimesIn();
					timesIn = "BASE";
				} else
					timesIn = bulkCrewScheduleReportDTO.getTimesIn();
			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getFlightTimesIn())
					&& bulkCrewScheduleReportDTO.getFlightTimesIn().length() > 0) {
				flightTimes = bulkCrewScheduleReportDTO.getFlightTimesIn();
			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getBase())
					&& bulkCrewScheduleReportDTO.getBase().length() > 0) {
				base = bulkCrewScheduleReportDTO.getBase();
			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDateRange())) {

				String[] period = bulkCrewScheduleReportDTO.getDateRange().split(BulkCrewScheduleReportTable.TO);
				startDate = period[0].trim();
				endDate = period[1].trim();
			}

			strBuffer.append(" WITH crwid AS " + "  (SELECT distinct d.id crew_id, " + "          1 t_c, "
					+ "          last_value(p.crew_type) ignore nulls over (partition by d.id order by d.id) crew_type, "
					+ "          d.stf_num, " + "          d.dspy_name ,  MST.RANK_DSPY_PRTY,  "
					+ " first_value(p.eff_from_dt) ignore nulls over (partition by d.id order by d.id) eff_from_dt,"
					+ " last_value(p.eff_to_dt) ignore nulls over (partition by d.id order by d.id)  eff_to_dt,"
					+ " last_value(p.rank) ignore nulls over (partition by d.id order by d.id) last_rank,"
					+ " last_value(p.flet) ignore nulls over (partition by d.id order by d.id) last_flet ,"
					+ " last_value(p.rank_seq) ignore nulls over (partition BY d.id order by d.id) last_rank_seq "
					+ "   FROM crw_own.crw_crw_data d , " + "        crw_own.crw_crw_plmt p, "
					+ "		   crw_own.crw_rank_mst mst , crw_own.crw_crw_empl employment2_,   "
					+ "     (SELECT to_date('" + startDate + "','dd-mon-yyyy') d1 " + "      FROM dual) l_d1, " + " "
					+ "     (SELECT to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') d2 "
					+ "      FROM dual) l_d2 " + "   WHERE d.delete_ind = 0 " + " AND p.delete_ind = 0  "
					+ "	AND  mst.delete_ind=0 "
					+ " AND (employment2_.delete_ind=0 or employment2_.delete_ind is null)  " + " AND d.id = p.crew_id "
					+ " AND p.eff_from_dt <= l_d2.d2" + " AND mst.rank_code = p.rank    "
					+ " AND p.eff_to_dt >= l_d1.d1 "

			+ " AND d.id  = employment2_.crew_id " + " AND employment2_.empl_stt_date                    <='" + endDate
					+ "'  " + " AND NVL(employment2_.empl_end_date, '17-Sep-2069')>='" + startDate + "' "
					+ "     AND ((" + staffNumberTempStr + " IS NULL " + "           AND 1 =1) " + "          OR ("
					+ staffNumberTempStr + " IS NOT NULL " + "              AND d.stf_num IN "
					+ "                (SELECT regexp_substr(" + staffNumberTempStr + ", '[^,]+', 1, LEVEL) token "
					+ "                 FROM dual CONNECT BY LEVEL <= length(" + staffNumberTempStr
					+ ") - length(REPLACE(" + staffNumberTempStr + ", ',', '')) + 1))) " + "     AND (("
					+ crewTypeTempStr + " IS NULL " + "           AND 1 =1) " + "          OR (" + crewTypeTempStr
					+ " IS NOT NULL " + "              AND crew_type IN " + "                (SELECT regexp_substr("
					+ crewTypeTempStr + ", '[^,]+', 1, LEVEL) token "
					+ "                 FROM dual CONNECT BY LEVEL <= length(" + crewTypeTempStr + ") - length(REPLACE("
					+ crewTypeTempStr + ", ',', '')) + 1))) " + "     AND ((" + fleetTempStr + " IS NULL "
					+ "           AND 1 =1) " + "          OR (" + fleetTempStr + " IS NOT NULL "
					+ "              AND flet IN " + "                (SELECT regexp_substr(" + fleetTempStr
					+ ", '[^,]+', 1, LEVEL) token " + "                 FROM dual CONNECT BY LEVEL <= length("
					+ fleetTempStr + ") - length(REPLACE(" + fleetTempStr + ", ',', '')) + 1))) " + "     AND (("
					+ rankTempStr + " IS NULL " + "           AND 1 =1) " + "          OR (" + rankTempStr
					+ " IS NOT NULL " + "              AND rank IN " + "                (SELECT regexp_substr("
					+ rankTempStr + ", '[^,]+', 1, LEVEL) token "
					+ "                 FROM dual CONNECT BY LEVEL <= length(" + rankTempStr + ") - length(REPLACE("
					+ rankTempStr + ", ',', '')) + 1))) " + "     AND ( ( '" + base + "' IS NULL "
					+ "           AND 1 = 1 ) " + "         OR ( '" + base + "' IS NOT NULL "
					+ "              AND base IN " + "                (SELECT Regexp_substr('" + base
					+ "', '[^,]+', 1, LEVEL) token " + "                 FROM   dual CONNECT BY LEVEL <= Length('"
					+ base + "') - Length(Replace('" + base + "', ',', ''))+ 1) ) ) ");

			if (null != bulkCrewScheduleReportDTO.getGroupIdInclude_exclude()
					&& bulkCrewScheduleReportDTO.getGroupIdInclude_exclude().length() > 0
					&& bulkCrewScheduleReportDTO.getGroupIdInclude_exclude().equalsIgnoreCase("include")) {
				tempStr = bulkCrewScheduleReportDTO.getCrewGroup().replaceAll(",", "','");
				strBuffer.append(" AND  EXISTS " + "  (SELECT 1 " + "  FROM crw_own.crw_grp grp, "
						+ "    crw_own.crw_grp_mem mem " + "  WHERE mem.crew_id  = d.id " + "  AND grp.grp_name  IN ('"
						+ tempStr + "') " + "  AND grp.delete_ind = 0 " + "  AND mem.delete_ind = 0 "
						+ "  AND mem.grp_id     = grp.ID " + "  AND to_date('" + startDate
						+ " 00:00:00','DD-MON-YYYY HH24:MI:SS') BETWEEN mem.eff_from_dt AND mem.eff_to_dt "
						+ "  AND to_date('" + endDate
						+ " 23:59:59','DD-MON-YYYY HH24:MI:SS') BETWEEN mem.eff_from_dt AND mem.eff_to_dt " + "  )");
			}

			else if (null != bulkCrewScheduleReportDTO.getGroupIdInclude_exclude()
					&& bulkCrewScheduleReportDTO.getGroupIdInclude_exclude().length() > 0
					&& bulkCrewScheduleReportDTO.getGroupIdInclude_exclude().equalsIgnoreCase("exclude")) {
				tempStr = bulkCrewScheduleReportDTO.getCrewGroup().replaceAll(",", "','");
				strBuffer.append(" AND NOT EXISTS " + "  (SELECT 1 " + "  FROM crw_own.crw_grp grp, "
						+ "    crw_own.crw_grp_mem mem " + "  WHERE mem.crew_id  = d.id " + "  AND grp.grp_name  IN ('"
						+ tempStr + "') " + "  AND grp.delete_ind = 0 " + "  AND mem.delete_ind = 0 "
						+ "  AND mem.grp_id     = grp.ID "
						/*
						 * + "  AND to_date('" + startDate +
						 * " 00:00:00','DD-MON-YYYY HH24:MI:SS') BETWEEN mem.eff_from_dt AND mem.eff_to_dt "
						 */
						+ "  AND to_date('" + endDate
						+ " 23:59:59','DD-MON-YYYY HH24:MI:SS') BETWEEN mem.eff_from_dt AND mem.eff_to_dt " + "  )");
			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getAircraftType())) {
				if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getAircraftType()))
					tempStr = bulkCrewScheduleReportDTO.getAircraftType();

				strBuffer.append(" AND EXISTS ( SELECT 1 " + " FROM   crw_own.crw_crw_qual q "
						+ " WHERE  q.delete_ind = 0 " + " AND qual_type='A/C Type'" + " AND    d.id = q.crew_id "
						+ " AND    q.eff_from_dt <= l_d2.d2 " + " AND    q.eff_to_dt >= l_d1.d1 " + " AND " + " CASE "
						+ " WHEN '" + tempStr + "' IS NULL THEN 1 " + " WHEN '" + tempStr + "' IS NOT NULL "
						+ " AND    qual_code IN " + " ( " + " SELECT regexp_substr('" + tempStr
						+ "', '[^,]+', 1, level) token " + " FROM   dual connect BY level <= length('" + tempStr
						+ "') - length(replace('" + tempStr + "', ',', '')) + 1 ) THEN 1" + " END = 1 )");

			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getQualification())) {
				if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getQualification()))
					tempStr = bulkCrewScheduleReportDTO.getQualification();

				strBuffer.append(" AND EXISTS ( SELECT 1 " + " FROM   crw_own.crw_crw_qual q "
						+ " WHERE  q.delete_ind = 0 " + " AND qual_type<>'A/C Type'" + " AND    d.id = q.crew_id "
						+ " AND    q.eff_from_dt <= l_d2.d2 " + " AND    q.eff_to_dt >= l_d1.d1 " + " AND " + " CASE "
						+ " WHEN '" + tempStr + "' IS NULL THEN 1 " + " WHEN '" + tempStr + "' IS NOT NULL "
						+ " AND    qual_code IN " + " ( " + " SELECT regexp_substr('" + tempStr
						+ "', '[^,]+', 1, level) token " + " FROM   dual connect BY level <= length('" + tempStr
						+ "') - length(replace('" + tempStr + "', ',', '')) + 1 ) THEN 1" + " END = 1 )");

			}

			strBuffer.append(" ) " + " SELECT t1.stdt AS \"DAT\", "
					+ "       t2.a1||''||listagg(t2.str|| chr(10)) within GROUP (ORDER BY t1.stdt) \"FLIGHT/ACTIVTY\",  t2.pa_ind, "
					+ "       c.crew_id,c.crew_type,c.last_flet,c.last_rank, c.stf_num, c.dspy_name,  c.last_rank_seq, t2.plnd_duty_rpt_date_fmt, t2.ntfd_ind , t2.acy , t2.acy_cat"
					+ " FROM " + "  (SELECT b.*, rank() OVER (PARTITION BY crew_id ORDER BY rost_stt_date) rnk, "
					+ "                      CASE " + "                          WHEN '" + rosterFormat
					+ "' = 'FD' THEN CASE "
					+ "	WHEN item_seq_num = 1 AND sdt > TRUNC (plnd_duty_rpt_date) AND asgn_type = 'P' THEN  CASE WHEN ? = 1 AND nvl(b.acy_cat,'WRK') = 'WRK' THEN 'RPT:' || TO_CHAR (plnd_duty_rpt_date, 'dd-MON-yy hh24:mi') || '|' ELSE null end  "
					+ "                                                  WHEN item_seq_num = 1 AND sdt = TRUNC (plnd_duty_rpt_date) AND asgn_type = 'P'  THEN CASE WHEN ? = 1 AND nvl(b.acy_cat,'WRK') = 'WRK' THEN 'RPT:' || TO_CHAR (plnd_duty_rpt_date, 'hh24:mi') || '|' ELSE null end "
					+ "                                                  WHEN sdt = TRUNC (std) AND asgn_type = 'P' THEN CASE WHEN ? = 1 AND  nvl(b.acy_cat,'WRK') = 'WRK' THEN 'RPT:' || TO_CHAR (plnd_duty_rpt_date, 'hh24:mi') || '|' ELSE null end "
					+ "      WHEN asgn_type = 'A' AND  ?  = 1 " + "      THEN " + "        CASE "
					+ "          WHEN b.acy_cat != 'NWK' " + "          THEN 'RPT:' "
					+ "            || TO_CHAR (plnd_duty_rpt_date, 'hh24:mi') " + "            || '|' "
					+ "            || flt_num " + "            || '|' " + "            || dep_stn "
					+ "            || '|' " + "            || TO_CHAR (std, 'hh24:mi') " + "            || '-' "
					+ "            || TO_CHAR (sta, 'hh24:mi') " + "          ELSE flt_num || '|' " + "          END "
					+ "      WHEN asgn_type = 'A' AND  ?  = 0 " + "      THEN " + "        CASE "
					+ "          WHEN b.acy_cat != 'NWK' " + "          THEN flt_num " + "            || '|' "
					+ "            || dep_stn " 
					+ "            || '|' " 
					+ "            || TO_CHAR (std, 'hh24:mi') "
					+ "            || '-' " 
					+ "            || TO_CHAR (sta, 'hh24:mi') "
					+ "          ELSE flt_num || '|' end end " 
					+ "                          WHEN '" + rosterFormat +" ' = 'FO' THEN flt_only " 
					+ "                          WHEN '" + rosterFormat+ " ' = 'PO' "
					/*+ "THEN pair_only " */
					+ "   THEN     CASE "
+ "          WHEN item_seq_num = 1 "
+ "          AND sdt           > TRUNC (plnd_duty_rpt_date) "
+ "          AND asgn_type     = 'P' "
+ "          THEN "
+ "            CASE "
+ "              WHEN ?                   = 1 "
+ "              AND NVL(b.acy_cat,'WRK') = 'WRK' "
+ "              THEN 'RPT:' "
+ "                || TO_CHAR (plnd_duty_rpt_date, 'dd-MON-yy hh24:mi') "
+ "                || '|' "
+ "                || pair_only "
+ "              ELSE pair_only "
+ "            END "
+ "          WHEN item_seq_num = 1 "
+ "          AND sdt           = TRUNC (plnd_duty_rpt_date) "
+ "          AND asgn_type     = 'P' "
+ "          THEN "
+ "            CASE "
+ "              WHEN ?                   = 1 "
+ "              AND NVL(b.acy_cat,'WRK') = 'WRK' "
+ "              THEN 'RPT:' "
+ "                || TO_CHAR (plnd_duty_rpt_date, 'hh24:mi') "
+ "                || '|' "
+ "                || pair_only "
+ "              ELSE pair_only "
+ "            END "
+ "          WHEN sdt      = TRUNC (std) "
+ "          AND asgn_type = 'P' "
+ "          THEN "
+ "            CASE "
+ "              WHEN ?                   = 1 "
+ "              AND NVL(b.acy_cat,'WRK') = 'WRK' "
+ "              THEN 'RPT:' "
+ "                || TO_CHAR (plnd_duty_rpt_date, 'hh24:mi') "
+ "                || '|' "
+ "                || pair_only "
+ "              ELSE pair_only "
+ "            END "
+ "          WHEN asgn_type = 'A' "
+ "          AND ?          = 1 "
+ "          THEN "
+ "            CASE "
+ "              WHEN b.acy_cat != 'NWK' "
+ "              THEN 'RPT:' "
+ "                || TO_CHAR (plnd_duty_rpt_date, 'hh24:mi') "
+ "                || '|' "
+ "                || pair_only "
+ "              ELSE pair_only "
+ "                || '|' "
+ "            END "
+ "          WHEN asgn_type = 'A' "
+ "          AND ?          = 0 "
+ "          THEN "
+ "            CASE "
+ "              WHEN b.acy_cat != 'NWK' "
+ "              THEN pair_only "
+ "              ELSE pair_only "
+ "                || '|' "
+ "            END "
+ "        END"
					
					
					
					+ "                     END a1, " 
					+ "               CASE "
					+ "                          WHEN '" + rosterFormat + " '= 'FD' "
					+ "					 		THEN CASE "
					+ "WHEN item_type = 'F' THEN flt_num || '|' || dep_stn || '|' || TO_CHAR (std, 'hh24:mi') || '|' || arr_stn || '|' || CASE WHEN TRUNC (sta) = TRUNC (std) THEN TO_CHAR (sta, 'hh24:mi') || '|' "
					+ "                                                                                                                                                                          ELSE TO_CHAR (sta, 'hh24:mi') || '(+' || TO_CHAR (TRUNC (sta) - TRUNC (std)) || ')' || '|' END "
					+ "                                                                                                                                                                  || CASE WHEN act_typ IS NOT NULL AND duty_ind IS NOT NULL THEN'(' || act_typ  || ')'  || '|' "
					+ "                                                                                                                                                                          WHEN act_typ IS NOT NULL AND duty_ind IS NULL THEN  '(' || act_typ  || ')'  || '|' "
					+ "                                                                                                                                                                          WHEN act_typ IS NULL AND duty_ind IS NOT NULL THEN '|' "
					+ "                                                                                                                                                                          WHEN act_typ IS NULL AND duty_ind IS NULL THEN '|' "
					+ "                                                                                                                                                                          END "
					+ "                                                                                                                                                                  || CASE WHEN work_type <> 'OP' THEN work_type || '|'ELSE NULL END "
					+ "                                                                                                                                                                  || CASE WHEN splt_ind = 1 THEN '* ' ELSE NULL END "
					+ "                     WHEN item_type IN ( 'A', 'G' ) THEN flt_num "
					+ "                                                         || ' (' "
					+ "                                                         || dep_stn "
					+ "                                                         || ')' "
					+ "                                                         || CASE "
					+ "                     WHEN splt_ind = 1 THEN '* ' " + "                     ELSE NULL "
					+ "                                                            END " + "                   END "
					+ "                 ELSE NULL " + "               END                         str "
					+ "        FROM   (SELECT a.*, " + "                       First_value (Trunc (a.std)) "
					+ "                         over ( "
					+ "                           PARTITION BY pair_id, duty_seq_num "
					+ "                           ORDER BY std ASC)      sdt, "
					+ "                       Lead (item_seq_num) " + "                         over ( "
					+ "                           PARTITION BY duty_id "
					+ "                           ORDER BY item_seq_num) next_item_seq_num "
					+ ", row_number() over(partition by a.rost_stt_date,rost_end_date,flt_only,id order by a.cre_datt_bu desc ) as rn  "
					+ "                FROM   (SELECT r.crew_id, " 
					+ "                               r.asgn_type, "
					+ "                               i.item_type, " 
					+ "                               i.item_ref_id, "
					+ "                               r.id AS rost_id, "
					+ "  	  CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN r.stt_date "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN r.stt_date + r.stt_Date_vrnc_mins/1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN r.stt_date + " + baseTime + "  / 1440 "
					+ "        END rost_stt_date, "
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN r.end_date "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN r.end_date + r.end_Date_vrnc_mins/1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN r.end_date + " + baseTime + "  / 1440 "
					+ "        END rost_end_date, "
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN d.plnd_duty_rpt_date "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN d.plnd_duty_rpt_date + PLND_RPT_VRNC_MINS/1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN d.plnd_duty_rpt_date + " + baseTime + "  /1440 "
					+ "        END plnd_duty_rpt_date, "
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN TO_CHAR (d.plnd_duty_rpt_date, 'dd-MON-yy hh24:mi') "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN TO_CHAR ( d.plnd_duty_rpt_date + PLND_RPT_VRNC_MINS/ 1440, 'dd-MON-yy hh24:mi') "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN TO_CHAR ( d.plnd_duty_rpt_date + " + baseTime + " / 1440, 'dd-MON-yy hh24:mi') "
					+ "        END plnd_duty_rpt_date_fmt,"
					+ "       d.duty_seq_num, "
					+ "       i.item_seq_num, " 
					+ "		CASE "
					+ "          WHEN l_mod.ql_mod     = 'UTC' "
					+ "          AND act_est.l_act_est ='Scheduled' "
					+ "          THEN f.std "
					+ "          WHEN l_mod.ql_mod     = 'UTC' "
					+ "          AND act_est.l_act_est ='Best' "
					+ "          THEN f.btd "
					+ "          WHEN l_mod.ql_mod     = 'Local' "
					+ "          AND act_est.l_act_est ='Scheduled' "
					+ "          THEN f.std+ f.std_vrnc_mins/1440 "
					+ "          WHEN l_mod.ql_mod     = 'Local' "
					+ "          AND act_est.l_act_est ='Best' "
					+ "          THEN f.btd+ 0/1440 "
					+ "          WHEN l_mod.ql_mod     = 'BASE' "
					+ "          AND act_est.l_act_est ='Scheduled' "
					+ "          THEN f.std+ " + baseTime + " /1440 "
					+ "          WHEN l_mod.ql_mod     = 'BASE' "
					+ "          AND act_est.l_act_est ='Best' "
					+ "          THEN f.btd+ " + baseTime + " /1440 "
					+ "        END std,"
					
					+ " TRUNC ( "
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod     = 'UTC' "
					+ "          AND act_est.l_act_est ='Scheduled' "
					+ "          THEN f.std "
					+ "          WHEN l_mod.ql_mod     = 'UTC' "
					+ "          AND act_est.l_act_est ='Best' "
					+ "          THEN f.btd "
					+ "          WHEN l_mod.ql_mod     = 'Local' "
					+ "          AND act_est.l_act_est ='Scheduled' "
					+ "          THEN f.std+ f.std_vrnc_mins/1440 "
					+ "          WHEN l_mod.ql_mod     = 'Local' "
					+ "          AND act_est.l_act_est ='Best' "
					+ "          THEN f.btd+ 0/1440 "
					+ "          WHEN l_mod.ql_mod     = 'BASE' "
					+ "          AND act_est.l_act_est ='Scheduled' "
					+ "          THEN f.std+ " + baseTime + " /1440 "
					+ "          WHEN l_mod.ql_mod     = 'BASE' "
					+ "          AND act_est.l_act_est ='Best' "
					+ "          THEN f.btd+ " + baseTime + " /1440 "
					+ "       END) t_std,"
					
					+ "       CASE "
					+ "       	 WHEN f.car_code = (select cod_val from mst_own.mst_codeval where cod_id=(select cod_id from mst_own.mst_code where cod_name='CRW.DFLT_AIRLINE_CODE')) "
					+ "			 THEN f.flt_num " 
					+ "       ELSE f.car_code || flt_num "
					+ "       END flt_num, " 
					+ "       i.work_type, " 
					+ "       f.act_typ, "
					+ "       (SELECT duty_ind " 
					+ "       FROM   crw_own.crw_duty_ind "
					+ "       WHERE  rost_id = r.id " 
					+ "       AND delete_ind = 0 "
					+ "       AND ROWNUM = 1)  duty_ind, " 
					+ "       i.splt_ind, " 
					+ "       f.dep_stn, "
					+ "       f.arr_stn, " 
					
					+ "		  CASE "
					+ "          WHEN l_mod.ql_mod     = 'UTC' "
					+ "          AND act_est.l_act_est ='Scheduled' "
					+ "          THEN f.sta "
					+ "          WHEN l_mod.ql_mod     = 'UTC' "
					+ "          AND act_est.l_act_est ='Best' "
					+ "          THEN f.bta "
					+ "          WHEN l_mod.ql_mod     = 'Local' "
					+ "          AND act_est.l_act_est ='Scheduled' "
					+ "          THEN f.sta + f.sta_vrnc_mins/1440 "
					+ "          WHEN l_mod.ql_mod     = 'Local' "
					+ "          AND act_est.l_act_est ='Best' "
					+ "          THEN f.bta+ 0/1440 "
					+ "          WHEN l_mod.ql_mod     = 'BASE' "
					+ "          AND act_est.l_act_est ='Scheduled' "
					+ "          THEN f.sta+ " + baseTime + " /1440 "
					+ "          WHEN l_mod.ql_mod     = 'BASE' "
					+ "          AND act_est.l_act_est ='Best' "
					+ "          THEN f.bta+ " + baseTime + " /1440 "
					+ "        END sta,"
					
					+ "       p.id    AS pair_id, "
					+ "       d.id    AS duty_id, " 
					+ "       i.id    AS item_id, "
					+ "       f.car_code || f.flt_num flt_only, "
					+ "       p.pair_num pair_only, "
					+ "		  'WRK' acy_cat, "
					+ "       CASE "
					+ "			 WHEN r.ack_date IS NULL "
					+ "			 THEN 'UN' "
					+ "			 ELSE NULL "
					+ "		  END ntfd_ind , "
					+ "		  CASE "
					+ "			 WHEN r.pre_asgn_ind = 1 "
					+ "			 THEN 'PA' "
					+ "			 ELSE null "
					+ "		  END as pa_ind ,"
					+ "		  'False' acy , "
					+ "		  row_number() over (partition by r.crew_id, trunc(p.stt_date) order by snap.pubd_on desc, p.stt_date asc) crew_daily_pair_acy_ordr ,"
					+ "		  r.id,"
					+ "		  r.asgn_ref_ver_id,"
					+ "		  f.cre_datt_bu "
					+ "       FROM crw_own.crw_rost_pubd_snap snap " 
					+ "       JOIN crw_own.crw_rost_snap r "
					+ "       ON snap.crw_rost_snap_id = r.id " 
					+ "       AND r.delete_ind = 0 "
					+ "  	  AND r.ROST_VER_ID = snap.ROST_VER_ID "
					+ "       LEFT OUTER JOIN crw_own.crw_pair_snap p " 
					+ "       ON r.asgn_type = 'P' "
					+ "       AND p.pair_id = r.asgn_ref_id " 
					+ "       AND p.pair_ver_id = r.asgn_ref_ver_id "
					+ "       AND p.delete_ind = 0 " 
					+ "       LEFT OUTER JOIN crw_own.crw_pair_duty_snap d "
					+ "       ON p.id = d.crw_pair_snap_id " 
					+ "       AND d.delete_ind = 0 "
					+ "       LEFT OUTER JOIN crw_own.crw_pair_duty_item_snap i "
					+ "       ON i.item_type  = 'F'"
					+ "       AND d.id = i.crw_pair_duty_snap_id " 
					+ "       AND i.delete_ind = 0 "
					+ "       LEFT OUTER JOIN crw_own.crw_flt_snap f " 
					+ "       ON i.item_ref_id = f.flt_id " 
					+ "       AND i.item_ver_id = f.flt_ver_id "
					+ "       AND f.delete_ind = 0, " 
					+ "       (SELECT '" + timesIn + "' ql_mod "
					+ "       FROM   dual) l_mod, " 
					+ "       (SELECT '" + startDate + "' d1 "
					+ "       FROM   dual) l_d1, " 
					+ "       (SELECT to_date('" + endDate
					+ " 23:59:59','DD-MON-YYYY HH24:MI:SS') d2 " 
					+ "       FROM   dual) l_d2, " + "       crwid, "
					+ "       (SELECT '" + flightTimes + "' AS l_act_est " 
					+ "       FROM   dual) act_est "
					
					+ "       WHERE  r.crew_id = crwid.crew_id "
					+ "		  AND snap.PUBD_ID in (select CHG_TXN_ID from (select CHG_TXN_ID,row_number() over (partition by crew_id,end_date order by CRE_DATT_BU desc) as rn "
					+ "                                                 from crw_own.crw_rost_hist where CHG_TYPE_CODE = 'RST_PUBLISHED' "
					+ " 												and crew_id = r.crew_id "
					+ "													and STT_DATE<=to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') "
					+ "													and END_DATE> to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS') "
					+ "                                                ) where rn =1 "
					+ "                        )"
					
					+ "     AND  ((l_mod.ql_mod = 'UTC' AND r.stt_date BETWEEN to_date('" + startDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)"
					+ " or"
					+ " 	(l_mod.ql_mod = 'Local' AND r.stt_date + (nvl(r.stt_date_vrnc_mins,0) / 1440) BETWEEN to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)"
					+ " or"
					+ "     (l_mod.ql_mod = 'BASE' AND r.stt_date + (NVL(" + baseTime + " ,0) / 1440) BETWEEN to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)) "

					
					+ "       UNION ALL " 
					
					+ "       SELECT r.crew_id, " 
					+ "       r.asgn_type, "
					+ "       i.item_type, " 
					+ "       i.item_ref_id, " 
					+ "       r.id AS rost_id, "
					+ "		  CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN r.stt_date "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN r.stt_date + r.stt_date_vrnc_mins/1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN r.stt_date + " + baseTime + "  /1440 "
					+ "        END rost_stt_date, "
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN r.end_date "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN r.end_date + r.end_date_vrnc_mins/1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN r.end_date + " + baseTime + "  /1440 "
					+ "        END rost_end_date, "
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN d.plnd_duty_rpt_date "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN d.plnd_duty_rpt_date + PLND_RPT_VRNC_MINS/1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN d.plnd_duty_rpt_date + " + baseTime + "  /1440 "
					+ "        END plnd_duty_rpt_date, "
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN TO_CHAR (d.plnd_duty_rpt_date, 'dd-MON-yy hh24:mi') "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN TO_CHAR ( d.plnd_duty_rpt_date + PLND_RPT_VRNC_MINS/ 1440, 'dd-MON-yy hh24:mi') "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN TO_CHAR ( d.plnd_duty_rpt_date + " + baseTime + "  / 1440, 'dd-MON-yy hh24:mi') "
					+ "        END plnd_duty_rpt_date_fmt," 
					+ "        d.duty_seq_num, " 
					+ "        i.item_seq_num, "
					+ "		   CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN a.stt_date "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN a.stt_date + a.stt_date_vrnc_mins/1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN a.stt_date + " + baseTime + "  /1440 "
					+ "        END stt_date, "
					+ "        TRUNC ( "
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN a.stt_date "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN a.stt_date + a.stt_date_vrnc_mins/1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN a.stt_date + " + baseTime + "  /1440 "
					+ "        END) t_std,"
					+ "       a.acy_code, " 
					+ "       i.work_type, "
					+ "       NULL AS act_typ, " 
					+ "       (SELECT duty_ind "
					+ "       FROM   crw_own.crw_duty_ind " 
					+ "       WHERE  rost_id = r.id "
					+ "       AND delete_ind = 0 " 
					+ "       AND ROWNUM = 1)  duty_ind, " 
					+ "       i.splt_ind, "
					+ "       a.acy_lcn, " 
					+ "       a.acy_lcn, " 
					
					+ "		  CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN a.end_date "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN a.end_date + a.end_Date_vrnc_mins/1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN a.end_date + " + baseTime + "  /1440 "
					+ "        END end_date,"
					
					+ "       p.id                     AS pair_id, "
					+ "       d.id                     AS duty_id, " 
					+ "       i.id                     AS item_id, "
					+ "       a.acy_code               flt_only, "
					+ "       p.pair_num               pair_only,  "
					+ "		  a.acy_cat ,"
					+ "       CASE "
					+ "			 WHEN r.ack_date IS NULL "
					+ "			 THEN 'UN' "
					+ "			 ELSE NULL "
					+ "	      END ntfd_ind , "
					+ "		  CASE "
					+ "			 WHEN r.pre_asgn_ind = 1 "
					+ "			 THEN 'PA' "
					+ "			 ELSE null "
					+ "		  END as pa_ind  ,"
					+ "		  'False' acy , "
					+ "		  row_number() over (partition by r.crew_id, trunc(p.stt_date) order by snap.pubd_on desc, p.stt_date asc) crew_daily_pair_acy_ordr, "
					+ "		  r.id,"
					+ "		  r.asgn_ref_ver_id,"
					+ "		  a.cre_datt_bu "
					
					+ "       FROM crw_own.crw_rost_pubd_snap snap " 
					+ "       JOIN crw_own.crw_rost_snap r "
					+ "       ON snap.crw_rost_snap_id = r.id " 
					+ "       AND r.delete_ind = 0 "
					+ "  	  AND r.ROST_VER_ID = snap.ROST_VER_ID "
					+ "       LEFT OUTER JOIN crw_own.crw_pair_snap p " 
					+ "       ON r.asgn_type = 'P' "
					+ "       AND p.pair_id = r.asgn_ref_id " 
					+ "       AND p.pair_ver_id = r.asgn_ref_ver_id "
					+ "       AND p.delete_ind = 0 " 
					+ "       LEFT OUTER JOIN crw_own.crw_pair_duty_snap d "
					+ "       ON p.id = d.crw_pair_snap_id " 
					+ "       AND d.delete_ind = 0 "
					+ "       LEFT OUTER JOIN crw_own.crw_pair_duty_item_snap i "
					+ "       ON i.item_type = 'A' "
					+ "       AND d.id = i.crw_pair_duty_snap_id " 
					+ "       AND i.delete_ind = 0 "
					+ "       LEFT OUTER JOIN crw_own.crw_acy_snap a " 
					+ "       ON i.item_ref_id = a.acy_id " 
					+ "       AND i.item_ver_id = a.acy_ver_id "
					+ "       AND a.delete_ind = 0, " 
					+ "       (SELECT '" + timesIn + "' ql_mod "
					+ "       FROM   dual) l_mod, " 
					+ "       (SELECT '" + startDate + "' d1 "
					+ "       FROM   dual) l_d1, " 
					+ "       (SELECT to_date('" + endDate
					+ " 23:59:59','DD-MON-YYYY HH24:MI:SS') d2 " 
					+ "       FROM   dual) l_d2, " 
					+ "       crwid "
					
					+ "       WHERE r.crew_id = crwid.crew_id  " 
					+ "		   AND snap.PUBD_ID in (select CHG_TXN_ID from (select CHG_TXN_ID,row_number() over (partition by crew_id,end_date order by CRE_DATT_BU desc) as rn "
					+ "                                                 from crw_own.crw_rost_hist where CHG_TYPE_CODE = 'RST_PUBLISHED' "
					+ "													and crew_id = r.crew_id "
					+ "													and STT_DATE<=to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') "
					+ "													and END_DATE> to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS') "
					+ "                                                ) where rn =1 "
					+ "                        )"
					
					+ "     AND  ((l_mod.ql_mod = 'UTC' AND r.stt_date BETWEEN to_date('" + startDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5 )"
					+ " or"
					+ " 	(l_mod.ql_mod = 'Local' AND r.stt_date + (nvl(r.stt_date_vrnc_mins,0) / 1440) BETWEEN to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS')  - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)"
					+ " or"
					+ "     (l_mod.ql_mod = 'BASE' AND r.stt_date + (NVL(" + baseTime + " ,0) / 1440) BETWEEN to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS')  - 5 AND to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)) "

					+ "       UNION ALL " 
					+ "       SELECT r.crew_id, " 
					+ "       r.asgn_type, "
					+ "       i.item_type, " 
					+ "       i.item_ref_id, " 
					+ "       r.id AS rost_id, "
					+ "CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN r.stt_date "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN r.stt_date + r.stt_date_vrnc_mins/1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN r.stt_date + " + baseTime + "  /1440 "
					+ "        END rost_stt_date, "
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN r.end_date "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN r.end_date + r.end_date_vrnc_mins/1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN r.end_date + " + baseTime + "  /1440 "
					+ "        END rost_end_date, "
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN d.plnd_duty_rpt_date "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN d.plnd_duty_rpt_date + PLND_RPT_VRNC_MINS/1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN d.plnd_duty_rpt_date + " + baseTime + " /1440 "
					+ "        END plnd_duty_rpt_date, "
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN TO_CHAR (d.plnd_duty_rpt_date, 'dd-MON-yy hh24:mi') "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN TO_CHAR ( d.plnd_duty_rpt_date + PLND_RPT_VRNC_MINS/ 1440, 'dd-MON-yy hh24:mi') "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN TO_CHAR ( d.plnd_duty_rpt_date + " + baseTime + " / 1440, 'dd-MON-yy hh24:mi') "
					+ "        END plnd_duty_rpt_date_fmt,"
					+ "       d.duty_seq_num, " 
					+ "       i.item_seq_num, "
					+ "		  CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN g.stt_date "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN g.stt_date + g.stt_vrnc_mins/1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN g.stt_date + " + baseTime + " /1440 "
					+ "       END stt_date, "
					+ "       TRUNC ( "
					+ "       CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN g.stt_date "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN g.stt_date + g.stt_vrnc_mins/1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN g.stt_date + " + baseTime + " /1440 "
					+ "        END) t_std,"
					+ "       g.trsp_type, " 
					+ "       i.work_type, "
					+ "       NULL AS act_typ, " 
					+ "       (SELECT duty_ind "
					+ "       FROM   crw_own.crw_duty_ind " 
					+ "       WHERE  rost_id = r.id "
					+ "       AND delete_ind = 0 " 
					+ "       AND ROWNUM = 1)  duty_ind, " 
					+ "       i.splt_ind, "
					+ "       g.orig, " 
					+ "       g.dest, " 
					+ "		  CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "          THEN g.end_date "
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN g.end_date + g.end_vrnc_mins/1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN g.end_date + " + baseTime + " /1440 "
					+ "       END end_date,"
					+ "       p.id                     AS pair_id, "
					+ "       d.id                     AS duty_id, " 
					+ "       i.id                     AS item_id, "
					+ "       g.trsp_type              flt_only, "
					+ "       p.pair_num               pair_only,  "
					+ "		  NULL acy_cat,"
					+ "       CASE "
					+ "			 WHEN r.ack_date IS NULL "
					+ "			 THEN 'UN' "
					+ "			 ELSE NULL "
					+ "		  END ntfd_ind , "
					+ "		  CASE "
					+ "			 WHEN r.pre_asgn_ind = 1 "
					+ "			 THEN 'PA' "
					+ "			 ELSE null "
					+ "		  END as pa_ind  ,"
					+ "		  'False' acy , "
					+ "		  row_number() over (partition by r.crew_id, trunc(p.stt_date) order by snap.pubd_on desc, p.stt_date asc) crew_daily_pair_acy_ordr ,"
					+ "		  r.id,"
					+ "		  r.asgn_ref_ver_id,"
					+ "		  g.cre_datt_bu "
					+ "       FROM  crw_own.crw_rost_pubd_snap snap " 
					+ "       JOIN crw_own.crw_rost_snap r "
					+ "       ON snap.crw_rost_snap_id = r.id " 
					+ "       AND r.delete_ind = 0 "
					+ "  	  AND r.ROST_VER_ID = snap.ROST_VER_ID "
					+ "       LEFT OUTER JOIN crw_own.crw_pair_snap p " 
					+ "       ON r.asgn_type = 'P' "
					+ "       AND p.pair_id = r.asgn_ref_id " 
					+ "       AND p.pair_ver_id = r.asgn_ref_ver_id "
					+ "       AND p.delete_ind = 0 " 
					+ "       LEFT OUTER JOIN crw_own.crw_pair_duty_snap d "
					+ "       ON p.id = d.crw_pair_snap_id " 
					+ "       AND d.delete_ind = 0 "
					+ "       LEFT OUTER JOIN crw_own.crw_pair_duty_item_snap i "
					+ "       ON i.item_type = 'G' "
					+ "       AND d.id = i.crw_pair_duty_snap_id " 
					+ "       AND i.delete_ind = 0 "
					+ "       LEFT OUTER JOIN crw_own.crw_grnd_mvt_snap g " 
					+ "       ON i.item_ref_id = g.grnd_mvt_id " 
					+ "       AND i.item_ver_id = g.grnd_mvt_ver_id, "
					+ "       (SELECT '" + timesIn + "' ql_mod " 
					+ "       FROM   dual) l_mod, " 
					+ "       (SELECT '"
					+ startDate + "' d1 " 
					+ "       FROM   dual) l_d1, " 
					+ "       (SELECT to_date('" + endDate
					+ " 23:59:59','DD-MON-YYYY HH24:MI:SS') d2 " 
					+ "       FROM   dual) l_d2, " 
					+ "       crwid "
					
					+ "       WHERE  r.crew_id = crwid.crew_id  " 
					
					+ "		   AND snap.PUBD_ID in (select CHG_TXN_ID from (select CHG_TXN_ID,row_number() over (partition by crew_id,end_date order by CRE_DATT_BU desc) as rn "
					+ "                                                 from crw_own.crw_rost_hist "
					+ "													where CHG_TYPE_CODE = 'RST_PUBLISHED' "
					+ "													and crew_id = r.crew_id "
					+ "													and STT_DATE<=to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') "
					+ "													and END_DATE> to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS') "
					+ "                                                ) where rn =1 "
					+ "                        )"
					
					
					+ "     AND  ((l_mod.ql_mod = 'UTC' AND r.stt_date BETWEEN to_date('" + startDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS')  - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5 )"
					+ " or"
					+ " 	(l_mod.ql_mod = 'Local' AND r.stt_date + (nvl(r.stt_date_vrnc_mins,0) / 1440) BETWEEN to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS')  - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)"
					+ " or"
					+ "     (l_mod.ql_mod = 'BASE' AND r.stt_date + (NVL(" + baseTime + " ,0) / 1440) BETWEEN to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS')  - 5 AND to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)) "

					+ "       UNION ALL "
					
					+ "       SELECT r.crew_id, " 
					+ "       r.asgn_type, "
					+ "       NULL                     AS item_type, "
					+ "       NULL                     AS item_ref_id, "
					+ "       r.id                     AS rost_id, " 
					+ "       CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 0 " 
					+ "          THEN r.stt_date "
					+ "			 WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 1"
					+ "			 THEN r.stt_date + r.stt_date_vrnc_mins / 1440"
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN r.stt_date + r.stt_date_vrnc_mins / 1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' " 
					+ "          THEN r.stt_date + " + baseTime + " / 1440 "
					+ "        END rost_stt_date, " 
					+ "        CASE " 
					+ "          WHEN l_mod.ql_mod = 'UTC' AND a.full_day_ind = 0"
					+ "          THEN r.end_date " 
					+ "			 WHEN l_mod.ql_mod = 'UTC' AND a.full_day_ind = 1"
					+ "			 THEN r.end_date + r.end_date_vrnc_mins / 1440"
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN r.end_date + r.end_date_vrnc_mins / 1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' " 
					+ "          THEN r.end_date + " + baseTime + " / 1440 "
					+ "        END rost_end_date, " 
					+ "        CASE " 
					+ "          WHEN l_mod.ql_mod = 'UTC' AND a.full_day_ind = 0"
					+ "          THEN r.stt_date " 
					+ "			 WHEN l_mod.ql_mod = 'UTC' AND a.full_day_ind = 1"
					+ "			 THEN r.stt_date + r.stt_date_vrnc_mins / 1440"
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN r.stt_date + r.stt_Date_vrnc_mins/1440 " 
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN r.stt_date + " + baseTime + " / 1440 " 
					+ "        END plnd_duty_rpt_date, "
					+ "		   CASE"
					+ "			 WHEN l_mod.ql_mod = 'UTC' "
					+ "			 THEN TO_CHAR (r.stt_date, 'dd-MON-yy hh24:mi')"
					+ "			 WHEN l_mod.ql_mod = 'Local' "
					+ "			 THEN TO_CHAR ( r.stt_date + r.stt_Date_vrnc_mins / 1440, 'dd-MON-yy hh24:mi')"
					+ "          WHEN l_mod.ql_mod = 'BASE' "
					+ "          THEN TO_CHAR ( r.stt_date + " + baseTime + " / 1440, 'dd-MON-yy hh24:mi')"
					+ "		   END plnd_duty_rpt_date_fmt, "
					+ "        NULL                     AS duty_seq_num, "
					+ "        NULL                     AS item_seq_num, " 
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 0" 
					+ "          THEN a.stt_date "
					+ "			 WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 1"
					+ "			 THEN a.stt_date + a.stt_date_vrnc_mins / 1440"
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN a.stt_date + a.stt_date_vrnc_mins / 1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' " 
					+ "          THEN a.stt_date + " + baseTime + " / 1440 "
					+ "        END stt_date, " 
					+ "        TRUNC ( " 
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 0" 
					+ "          THEN a.stt_date "
					+ "			 WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 1"
					+ "			 THEN a.stt_date + a.stt_date_vrnc_mins / 1440"
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN a.stt_date + a.stt_date_vrnc_mins / 1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' " 
					+ "          THEN a.stt_date + " + baseTime + " / 1440 "
					+ "        END) t_std, " 
					+ "        a.acy_code, "
					+ "        NULL AS work_type, " 
					+ "        NULL AS act_typ, "
					+ "        (SELECT duty_ind " 
					+ "        FROM crw_own.crw_duty_ind "
					+ "        WHERE  rost_id = r.id " 
					+ "        AND delete_ind = 0 "
					+ "        AND ROWNUM = 1)  duty_ind, " 
					+ "        NULL  AS splt_ind, "
					+ "        a.acy_lcn, " 
					+ "        a.acy_lcn, " 
					+ "        CASE "
					+ "          WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 0" 
					+ "          THEN a.end_date "
					+ "			 WHEN l_mod.ql_mod = 'UTC' "
					+ "			 AND a.full_day_ind = 1"
					+ "			 THEN a.end_date + a.end_date_vrnc_mins / 1440"
					+ "          WHEN l_mod.ql_mod = 'Local' "
					+ "          THEN a.end_date + a.end_date_vrnc_mins / 1440 "
					+ "          WHEN l_mod.ql_mod = 'BASE' " 
					+ "          THEN a.end_date + " + baseTime + " / 1440 "
					+ "        END end_date, " 
					+ "        NULL                     AS pair_id, "
					+ "        NULL                     AS duty_id, " 
					+ "        NULL                     AS item_id, "
					+ "        a.acy_code               flt_only, "
					+ "        a.acy_code               pair_only, "
					+ "		   a.acy_cat,"
					+ " 	   CASE "
					+ "			 WHEN r.ack_date IS NULL "
					+ "			 THEN 'UN' "
					+ "			 ELSE NULL "
					+ "		   END ntfd_ind , "
					+ "		   CASE "
					+ "			 WHEN r.pre_asgn_ind = 1 "
					+ "			 THEN 'PA' "
					+ "			 ELSE null "
					+ "		   END as pa_ind ,"
					+ "		   'True' acy , "
					+ "		   row_number() over (partition by r.crew_id, trunc(a.stt_date) order by snap.pubd_on desc, a.stt_date asc) crew_daily_pair_acy_ordr, "
					+ "		   r.id,"
					+ "		   r.asgn_ref_ver_id,"
					+ "		   a.cre_datt_bu "
					+ "       FROM crw_own.crw_rost_pubd_snap snap " 
					+ "       JOIN crw_own.crw_rost_snap r "
					+ "       ON r.asgn_type = 'A' "
					+ "       AND snap.crw_rost_snap_id = r.id " 
					+ "       AND r.delete_ind = 0 "
					+ "  	  AND r.ROST_VER_ID = snap.ROST_VER_ID "
					+ "       LEFT OUTER JOIN crw_own.crw_acy_snap a " 
					+ "       ON a.acy_id = r.asgn_ref_id " 
					+ "       AND r.rost_ver_id = a.acy_ver_id"
					+ "       AND a.delete_ind = 0, " 
					+ "       (SELECT '" + timesIn + "' ql_mod "
					+ "       FROM   dual) l_mod, " 
					+ "       (SELECT '" + startDate + "' d1 "
					+ "       FROM   dual) l_d1, " 
					+ "       (SELECT to_date('" + endDate
					+ " 23:59:59','DD-MON-YYYY HH24:MI:SS') d2 " 
					+ "       FROM   dual) l_d2, " 
					+ "       crwid "
					
					+ "       WHERE  r.crew_id = crwid.crew_id "
					
					+ "		  AND snap.PUBD_ID in (select CHG_TXN_ID from (select CHG_TXN_ID,row_number() over (partition by crew_id,end_date order by CRE_DATT_BU desc) as rn "
					+ "                                                 from crw_own.crw_rost_hist "
					+ "													where CHG_TYPE_CODE = 'RST_PUBLISHED' "
					+ "													and crew_id = r.crew_id "
					+ "													and STT_DATE<=to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') "
							+ "											and END_DATE> to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS') "
					+ "                                                ) where rn =1 "
					+ "                        )"
					
					+ "     AND  ((l_mod.ql_mod = 'UTC' AND a.full_day_ind = 0 AND r.stt_date BETWEEN to_date('" + startDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)"
					+ " or"
					+ "    (l_mod.ql_mod = 'UTC' AND a.full_day_ind = 1 AND r.stt_date + (nvl(r.stt_date_vrnc_mins,0) / 1440) BETWEEN to_date('" + startDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)"
					+ " or"
					+ " 	(l_mod.ql_mod = 'Local' AND r.stt_date + (nvl(r.stt_date_vrnc_mins,0) / 1440) BETWEEN to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND  to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS')+ 5)"
					+ " or"
					+ "     (l_mod.ql_mod = 'BASE' AND r.stt_date + (NVL(" + baseTime + " ,0) / 1440) BETWEEN to_date('" + startDate + "00:00:00','DD-MON-YYYY HH24:MI:SS') - 5 AND to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') + 5)) "
				
					+ "			) a  ) b "
				    + "  where rn =1 "
					+ " )t2, "
					+ "       (SELECT 1                    t_c, " 
					+ "               l_d1.d1 + ROWNUM - 1 stdt "
					+ "        FROM   all_objects, " 
					+ "               (SELECT To_date('" + startDate
					+ "', 'dd-mon-yyyy') d1 " 
					+ "                FROM   dual) l_d1, "
					+ "               (SELECT to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') d2 "
					+ "                FROM   dual) l_d2 " 
					+ "        WHERE  l_d1.d1 + ROWNUM <= l_d2.d2 + 1)t1, "
					+ "       crwid c " 
					+ "WHERE  t1.stdt = t2.t_std(+) " 
					+ "       AND t1.t_c = c.t_c "
					+ "       AND c.crew_id = t2.crew_id(+) " 					
					+ "  	  AND t1.stdt (+) >= c.eff_from_dt " 
					+ "       AND t1.stdt (+) <= c.eff_to_dt  "
					+ "GROUP  BY t1.stdt, " 
					+ "          t2.a1, "
					+ "          c.crew_id, " 
					+ "          c.crew_type, " 
					+ "          c.last_flet, "
					+ "          c.last_rank, " 
					+ "          c.stf_num, "
					+ "          c.dspy_name,  t2.acy_cat,t2.plnd_duty_rpt_date_fmt, t2.ntfd_ind ,   c.last_rank_seq , t2.pa_ind , t2.acy");

			addSortParams(strBuffer, bulkCrewScheduleReportDTO);
			preparedStatement = connection.prepareStatement(strBuffer.toString());

			preparedStatement.setString(1, showReportTime);
			preparedStatement.setString(2, showReportTime);
			preparedStatement.setString(3, showReportTime);
			preparedStatement.setString(4, showReportTime);
			preparedStatement.setString(5, showReportTime);
			preparedStatement.setString(6, showReportTime);
			preparedStatement.setString(7, showReportTime);
			preparedStatement.setString(8, showReportTime);
			preparedStatement.setString(9, showReportTime);
			preparedStatement.setString(10, showReportTime);

			setTime = System.currentTimeMillis();
			resultSet = preparedStatement.executeQuery();

			setTime2 = System.currentTimeMillis() - setTime;
			System.out.println(
					"Bulk Crew Schedule  Report --> Time Taken to fetch the Bulk Crew Schedule Published - ResultSet: "
							+ setTime2);
			String oldCrewId = null;
			setTime = System.currentTimeMillis();

			SimpleDateFormat myFormat2 = new SimpleDateFormat("dd-MMM-yy");
			SimpleDateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			previousCrewId = "";

			while (resultSet.next()) {

				if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.CRW_DTL))) {
					crewId = resultSet.getString(BulkCrewScheduleReportTable.CRW_DTL);

					if (previousCrewId.equals("")) {
						bulkCrewScheduleReportSO = new BulkCrewScheduleReportSO();
						bulkCrewScheduleReportSO.setCrewDate(datesInRange2);
						bulkCrewScheduleReportSO.setFleet(resultSet.getString(BulkCrewScheduleReportTable.FLEET));
						bulkCrewScheduleReportSO.setRank(resultSet.getString(BulkCrewScheduleReportTable.RANK));
						bulkCrewScheduleReportSO
								.setCrewType(resultSet.getString(BulkCrewScheduleReportTable.CREW_TYPE));
						bulkCrewScheduleReportSO
								.setStaffName(resultSet.getString(BulkCrewScheduleReportTable.STF_NAME));
						bulkCrewScheduleReportSO
								.setStaffNumber(resultSet.getString(BulkCrewScheduleReportTable.STF_NUM));

					} else if (!previousCrewId.equals(crewId)) {
						bulkSOMap.put(oldCrewId, bulkCrewScheduleReportSO);
						// bulkCrewScheduleReportSOList.add(bulkCrewScheduleReportSO);
						bulkCrewScheduleReportSO = new BulkCrewScheduleReportSO();
						bulkCrewScheduleReportSO.setCrewDate(datesInRange2);
						bulkCrewScheduleReportSO.setCrewDetails(crewId);
						bulkCrewScheduleReportSO.setFleet(resultSet.getString(BulkCrewScheduleReportTable.FLEET));
						bulkCrewScheduleReportSO.setRank(resultSet.getString(BulkCrewScheduleReportTable.RANK));
						bulkCrewScheduleReportSO
								.setCrewType(resultSet.getString(BulkCrewScheduleReportTable.CREW_TYPE));
						bulkCrewScheduleReportSO
								.setStaffName(resultSet.getString(BulkCrewScheduleReportTable.STF_NAME));
						bulkCrewScheduleReportSO
								.setStaffNumber(resultSet.getString(BulkCrewScheduleReportTable.STF_NUM));

					}

					String date = resultSet.getString(BulkCrewScheduleReportTable.DATE);
					Date dateFormat1 = myFormat.parse(date);

					String finalDate = myFormat2.format(dateFormat1);
					finalDate = finalDate.substring(0, finalDate.length() - 3);
					String prevDateNtfd = null;
					String prevDatePA = null;

					if (!CollectionUtils.isEmpty(datesInRange)) {
						String index = Integer.toString(getIndexFromDateRange(datesInRange, finalDate));

						if (BulkCrewScheduleReportTable.TRUE.equals(resultSet.getString("ACY")))
							bulkCrewScheduleReportSO.setShowDailyDHD(index, BulkCrewScheduleReportTable.FALSE);
						else if (BulkCrewScheduleReportTable.FALSE.equals(resultSet.getString("ACY")))
							bulkCrewScheduleReportSO.setShowDailyDHD(index, BulkCrewScheduleReportTable.TRUE);

						bulkCrewScheduleReportSO.setActivityCategory(index, resultSet.getString("ACY"));

						if (!StringUtils.isEmpty(resultSet.getString("ACY_CAT")))
							bulkCrewScheduleReportSO.setActivityCat(index, resultSet.getString("ACY_CAT"));
						if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.FLT_ACY).trim())) {

							bulkCrewScheduleReportSO.setCrewSchedule(index,
									resultSet.getString(BulkCrewScheduleReportTable.FLT_ACY).trim().replace("|", "\n"));

							if (showNotifTime && !StringUtils.isEmpty(resultSet.getString("NTFD_IND"))
									&& "UN".equals(resultSet.getString("NTFD_IND"))) {
								if (null == prevDateNtfd || !prevDateNtfd.equals(finalDate))
									bulkCrewScheduleReportSO.setNotifIndicators(index, resultSet.getString("NTFD_IND"));
								prevDateNtfd = finalDate;
							}
							if (showPA && !StringUtils.isEmpty(resultSet.getString("pa_ind"))) {
								if (null == prevDatePA || !prevDatePA.equals(finalDate))
									bulkCrewScheduleReportSO.setPAIndicators(index, resultSet.getString("pa_ind"));
								prevDatePA = finalDate;
							}
						}
					}

					bulkCrewScheduleReportSO.setFleet(resultSet.getString(BulkCrewScheduleReportTable.FLEET));
					bulkCrewScheduleReportSO.setRank(resultSet.getString(BulkCrewScheduleReportTable.RANK));

					oldCrewId = previousCrewId = crewId;
				}

			}
			bulkSOMap.put(crewId, bulkCrewScheduleReportSO);
		}

		catch (Exception e) {
			e.printStackTrace();
		} finally

		{
			try {
				bulkCrewScheduleReportSO.setCrewDate(datesInRange2);
				bulkSOMap.put(crewId, bulkCrewScheduleReportSO);
				close(connection, preparedStatement, resultSet);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		long setTime3 = System.currentTimeMillis() - setTime;
		System.out.println(
				"Bulk Crew Schedule  Report --> Time Taken to process AND return the Bulk Crew Schedule Published - ResultSet: "
						+ setTime3);
		return bulkSOMap;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	public List<BulkCrewScheduleReportSO> getBulkCrewScheduleActVsPubReportList(
			Map<String, BulkCrewScheduleReportSO> mapFromResultSetProcessingAct,
			Map<String, BulkCrewScheduleReportSO> mapFromResultSetProcessinPub) {

		long setTime = System.currentTimeMillis();

		List<String> crewIDList = new ArrayList(mapFromResultSetProcessingAct.keySet());
		List<BulkCrewScheduleReportSO> bulkCrewScheduleReportSOList = new ArrayList<BulkCrewScheduleReportSO>();
		try {
			if (!CollectionUtils.isEmpty(crewIDList)) {
				BulkCrewScheduleReportSO crewSchPubReportSO = new BulkCrewScheduleReportSO();
				BulkCrewScheduleReportSO crewSchActReportSO = new BulkCrewScheduleReportSO();

				if (!CollectionUtils.isEmpty(mapFromResultSetProcessinPub)
						&& !CollectionUtils.isEmpty(mapFromResultSetProcessingAct)) {
					for (String crewId : crewIDList) {
						if (mapFromResultSetProcessinPub.containsKey(crewId)
								&& mapFromResultSetProcessingAct.containsKey(crewId)) {

							if (null != mapFromResultSetProcessinPub.get(crewId)) {
								crewSchPubReportSO = mapFromResultSetProcessinPub.get(crewId);
								crewSchPubReportSO.setReportType("PUBLISHED");
							}

							if (null != mapFromResultSetProcessingAct.get(crewId)) {
								crewSchActReportSO = mapFromResultSetProcessingAct.get(crewId);
								crewSchActReportSO.setReportType("ACTUAL");
							}

							bulkCrewScheduleReportSOList.add(crewSchActReportSO);
							bulkCrewScheduleReportSOList.add(crewSchPubReportSO);
						}

						else if (!mapFromResultSetProcessinPub.containsKey(crewId)
								&& mapFromResultSetProcessingAct.containsKey(crewId)) {

							if (null != mapFromResultSetProcessingAct.get(crewId)) {
								crewSchActReportSO = mapFromResultSetProcessingAct.get(crewId);
								crewSchActReportSO.setReportType(BulkCrewScheduleReportTable.ACTUAL);
							}

							bulkCrewScheduleReportSOList.add(crewSchActReportSO);
							bulkCrewScheduleReportSOList
									.add(new BulkCrewScheduleReportSO(BulkCrewScheduleReportTable.PUBLISHED));
						}

						else if ((mapFromResultSetProcessinPub.containsKey(crewId)
								&& !mapFromResultSetProcessingAct.containsKey(crewId))) {
							if (null != mapFromResultSetProcessinPub.get(crewId)) {
								crewSchPubReportSO = mapFromResultSetProcessinPub.get(crewId);
								crewSchPubReportSO.setReportType(BulkCrewScheduleReportTable.PUBLISHED);
							}

							bulkCrewScheduleReportSOList
									.add(new BulkCrewScheduleReportSO(BulkCrewScheduleReportTable.ACTUAL));
							bulkCrewScheduleReportSOList.add(crewSchPubReportSO);
						}
					}

				}

				else if (CollectionUtils.isEmpty(mapFromResultSetProcessinPub)
						&& !CollectionUtils.isEmpty(mapFromResultSetProcessingAct)) {
					for (String crewId : crewIDList) {
						if (mapFromResultSetProcessingAct.containsKey(crewId)) {
							if (null != mapFromResultSetProcessingAct.get(crewId))
								crewSchActReportSO = mapFromResultSetProcessingAct.get(crewId);

							bulkCrewScheduleReportSOList.add(crewSchActReportSO);
							bulkCrewScheduleReportSOList
									.add(new BulkCrewScheduleReportSO(BulkCrewScheduleReportTable.PUBLISHED));
						}
					}
				}

				else if (!CollectionUtils.isEmpty(mapFromResultSetProcessinPub)
						&& CollectionUtils.isEmpty(mapFromResultSetProcessinPub)) {
					for (String crewId : crewIDList) {
						if (mapFromResultSetProcessinPub.containsKey(crewId)) {
							if (null != mapFromResultSetProcessinPub.get(crewId))
								crewSchPubReportSO = mapFromResultSetProcessinPub.get(crewId);

							bulkCrewScheduleReportSOList
									.add(new BulkCrewScheduleReportSO(BulkCrewScheduleReportTable.ACTUAL));
							bulkCrewScheduleReportSOList.add(crewSchPubReportSO);
						}
					}
				}

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		long setTime3 = System.currentTimeMillis() - setTime;
		System.out.println(
				"Bulk Crew Schedule  Report --> Time Taken to process AND return the Actual VS Published Bulk Crew Schedule- ResultSet: "
						+ setTime3);
		return bulkCrewScheduleReportSOList;

	}
	private Map<String, BulkCrewScheduleReportSO> setStatisticsInBulkSOMap(
			Map<String, BulkCrewScheduleReportSO> mapFromResultSetProcessing,
			BulkCrewScheduleReportDTO bulkCrewScheduleReportDTO) {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Connection connection = null;
		String startDate = null;
		String endDate = null;
		String base = null;
		String temp = null;
		Long setTime2 = 0L;

		if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDateRange())) {

			String[] period = bulkCrewScheduleReportDTO.getDateRange().split(BulkCrewScheduleReportTable.TO);
			startDate = period[0].trim();
			endDate = period[1].trim();
		}

		try {

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getBase())
					&& bulkCrewScheduleReportDTO.getBase().length() > 0) {
				base = bulkCrewScheduleReportDTO.getBase();
			}

			System.out.println("------------Entering Statistics Data Set---------------");
			connection = getConnection();
			StringBuffer strBuffer = new StringBuffer();

			strBuffer = new StringBuffer();

			strBuffer.append(" WITH item_stat AS " 
					+ "  (SELECT sitm.crew_id, " 
					+ "    SUM ( " + "    CASE "
					+ "      WHEN sitm.work_type NOT  IN (select work_type from crw_own.CRW_WORK_TYPE_MST where dh_ind=1  and delete_ind = 0 )"
					+ "      THEN sitm.blck_hrs_mins " 
					+ "      ELSE 0 "
					+ "    END) AS blk_hours, " 
					+ "    SUM ( " 
					+ "    CASE " 
					+ "      WHEN sitm.work_type  IN (select work_type from crw_own.CRW_WORK_TYPE_MST where dh_ind=1  and delete_ind = 0 )"
					+ "      THEN sitm.dur_mins " 
					+ "      ELSE 0 " 
					+ "    END)                AS dh_hours, "
					+ "    COUNT (DISTINCT " + "    CASE " 
					//+ "      WHEN sitm.work_type NOT IN ('DH','DX','DO') "
					+ "      WHEN sitm.item_type   = 'F' " 
					+ "      THEN sitm.item_ref_id " 
					+ "      ELSE NULL "
					+ "    END ) AS flt_legs_operated " + "  FROM crw_own.crw_stat_item sitm "
					+ "  WHERE sitm.stat_date BETWEEN TO_DATE ('" + startDate + "', 'DD-Mon-YYYY') AND TO_DATE ('"
					+ endDate + "', 'DD-Mon-YYYY') " + "  AND sitm.delete_ind = 0 " + "  GROUP BY crew_id " + "  ), "
					+ "  duty_stat AS " + "  (SELECT sdut.crew_id, " + "    SUM (sdut.duty_hrs_mins) AS duty_hrs "
					+ "  FROM crw_own.crw_stat_duty sdut " + "  WHERE sdut.stat_date BETWEEN TO_DATE ('" + startDate
					+ "', 'DD-Mon-YYYY') AND TO_DATE ('" + endDate + "', 'DD-Mon-YYYY') " + "  AND sdut.delete_ind = 0 "
					+ "  GROUP BY sdut.crew_id " + "  ) " + "SELECT  b.id, " + "  b.stf_num, "
					+ "  b.dspy_name stf_name, " + "  a.base, " + "  a.flet, " + "  a.RANK, "
					+ "  duty_stat.duty_hrs \"Duty Hrs\", " + "  item_stat.blk_hours \"Block Hrs\", "
					+ "  item_stat.dh_hours \"Deadhead Hrs\", " + "  item_stat.flt_legs_operated \"Flight Days\" "
					+ "FROM crw_own.crw_crw_plmt a, " + "  crw_own.crw_crw_data b, " + "  item_stat, " + "  duty_stat "
					+ "WHERE b.ID       = a.crew_id " + "AND a.delete_ind = 0 " + "AND b.delete_ind = 0 "
					+ "AND TO_DATE ('" + endDate + "', 'DD-Mon-YYYY') BETWEEN a.eff_from_dt AND a.eff_to_dt "
					+ "AND a.crew_id            = item_stat.crew_id(+) "
					+ "AND a.crew_id            = duty_stat.crew_id(+) " + "AND (item_stat.blk_hours > 0 "
					+ "OR duty_stat.duty_hrs    > 0)  " + "AND a.base   = ? ");

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getStaffNumber())
					&& bulkCrewScheduleReportDTO.getStaffNumber().length() > 0) {
				temp = bulkCrewScheduleReportDTO.getStaffNumber().replaceAll(",", "','");
				// temp = temp.substring(0, temp.length() - 3);
				strBuffer.append(" AND b.stf_num IN ('" + temp + "')");
			}

			/*
			 * if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getRank()) &&
			 * bulkCrewScheduleReportDTO.getRank().length() > 0) { temp =
			 * bulkCrewScheduleReportDTO.getRank().replaceAll(",", "','");
			 * strBuffer.append(" AND a.rank IN ('" + temp + "')"); }
			 */
			/*
			 * if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getFleet()) &&
			 * bulkCrewScheduleReportDTO.getFleet().length() > 0) { temp =
			 * bulkCrewScheduleReportDTO.getFleet().replaceAll(",", "','");
			 * strBuffer.append(" AND a.flet IN ('" + temp + "')"); }
			 */

			strBuffer.append(" order by b.stf_num");

			preparedStatement = connection.prepareStatement(strBuffer.toString());
			preparedStatement.setString(1, base);
			String crewIdHrs = null;

			long setTime = System.currentTimeMillis();
			resultSet = preparedStatement.executeQuery();
			setTime2 = System.currentTimeMillis() - setTime;
			System.out.println(
					"Bulk Crew Schedule  Report --> Time Taken to fetch the Statistics ResultSet from DB: " + setTime2);

			BulkCrewScheduleReportSO forTotalStats = new BulkCrewScheduleReportSO();
			String previousCrewId = "";

			while (resultSet.next()) {
				crewIdHrs = resultSet.getString("ID");

				if (!StringUtils.isEmpty(previousCrewId) && !previousCrewId.equals(crewIdHrs)
						&& null != forTotalStats) {
					mapFromResultSetProcessing.put(previousCrewId, forTotalStats);
				}
				if (StringUtils.isEmpty(previousCrewId) || !previousCrewId.equals(crewIdHrs)) {
					forTotalStats = mapFromResultSetProcessing.get(crewIdHrs);
				}

				if (null != forTotalStats) {
					if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.Duty_Hrs)))
						forTotalStats.setDutyHrs(calculateHourAndMinute(
								Integer.parseInt(resultSet.getString(BulkCrewScheduleReportTable.Duty_Hrs))));
					if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs)))
						forTotalStats.setBlockHrs(calculateHourAndMinute(
								Integer.parseInt(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs))));
					if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs)))
						forTotalStats.setDeadHDHrs(calculateHourAndMinute(
								Integer.parseInt(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs))));
					if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.Flight_Days)))
						forTotalStats.setFlightDays(resultSet.getString(BulkCrewScheduleReportTable.Flight_Days));

				}

				previousCrewId = crewIdHrs;

			}
			mapFromResultSetProcessing.put(crewIdHrs, forTotalStats);

		} catch (Exception e) {
			e.printStackTrace();
		} finally

		{
			try {
				close(connection, preparedStatement, resultSet);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		long setTime3 = System.currentTimeMillis() - setTime2;
		System.out.println(
				"Bulk Crew Schedule  Report --> Time Taken to process AND integrate the Statistics into BulkSO map: "
						+ setTime3);
		return mapFromResultSetProcessing;

	}

	private Map<String, BulkCrewScheduleReportSO> setStatisticsInBulkSOMapPublished(
			Map<String, BulkCrewScheduleReportSO> mapFromResultSetProcessing,
			BulkCrewScheduleReportDTO bulkCrewScheduleReportDTO) {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Connection connection = null;
		String startDate = null;
		String endDate = null;
		String base = null;
		String temp = null;
		Long setTime2 = 0L;

		if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDateRange())) {

			String[] period = bulkCrewScheduleReportDTO.getDateRange().split(BulkCrewScheduleReportTable.TO);
			startDate = period[0].trim();
			endDate = period[1].trim();
		}

		try {

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getBase())
					&& bulkCrewScheduleReportDTO.getBase().length() > 0) {
				base = bulkCrewScheduleReportDTO.getBase();
			}

			System.out.println("------------Entering Statistics Data Set---------------");
			connection = getConnection();
			StringBuffer strBuffer = new StringBuffer();

			strBuffer = new StringBuffer();

			/*strBuffer.append(" WITH item_stat AS " 
					+ "  (SELECT sitm.crew_id, " 
					+ "    SUM ( " + "    CASE "
					+ "      WHEN sitm.work_type NOT IN ('DH','DX','DO')" 
					+ "      THEN sitm.blck_hrs_mins " 
					+ "      ELSE 0 "
					+ "    END) AS blk_hours, " 
					+ "    SUM ( " 
					+ "    CASE " 
					+ "      WHEN sitm.work_type IN ('DH','DX','DO')"
					+ "      THEN sitm.dur_mins " 
					+ "      ELSE 0 " 
					+ "    END)                AS dh_hours, "
					+ "    COUNT (DISTINCT " + "    CASE " 
					//+ "      WHEN sitm.work_type NOT IN ('DH','DX','DO') "
					+ "      WHEN sitm.item_type   = 'F' " 
					+ "      THEN sitm.item_ref_id " 
					+ "      ELSE NULL "
					+ "    END ) AS flt_legs_operated " + "  FROM crw_own.crw_stat_item sitm "
					+ "  WHERE sitm.stat_date BETWEEN TO_DATE ('" + startDate + "', 'DD-Mon-YYYY') AND TO_DATE ('"
					+ endDate + "', 'DD-Mon-YYYY') " + "  AND sitm.delete_ind = 0 " + "  GROUP BY crew_id " + "  ), "
					+ "  duty_stat AS " + "  (SELECT sdut.crew_id, " + "    SUM (sdut.duty_hrs_mins) AS duty_hrs "
					+ "  FROM crw_own.crw_stat_duty sdut " + "  WHERE sdut.stat_date BETWEEN TO_DATE ('" + startDate
					+ "', 'DD-Mon-YYYY') AND TO_DATE ('" + endDate + "', 'DD-Mon-YYYY') " + "  AND sdut.delete_ind = 0 "
					+ "  GROUP BY sdut.crew_id " + "  ) " + "SELECT  b.id, " + "  b.stf_num, "
					+ "  b.dspy_name stf_name, " + "  a.base, " + "  a.flet, " + "  a.RANK, "
					+ "  duty_stat.duty_hrs \"Duty Hrs\", " + "  item_stat.blk_hours \"Block Hrs\", "
					+ "  item_stat.dh_hours \"Deadhead Hrs\", " + "  item_stat.flt_legs_operated \"Flight Days\" "
					+ "FROM crw_own.crw_crw_plmt a, " + "  crw_own.crw_crw_data b, " + "  item_stat, " + "  duty_stat "
					+ "WHERE b.ID       = a.crew_id " + "AND a.delete_ind = 0 " + "AND b.delete_ind = 0 "
					+ "AND TO_DATE ('" + endDate + "', 'DD-Mon-YYYY') BETWEEN a.eff_from_dt AND a.eff_to_dt "
					+ "AND a.crew_id            = item_stat.crew_id(+) "
					+ "AND a.crew_id            = duty_stat.crew_id(+) " + "AND (item_stat.blk_hours > 0 "
					+ "OR duty_stat.duty_hrs    > 0)  " + "AND a.base   = ? ");*/
			
			strBuffer.append("WITH item_stat AS "
			+ "  (SELECT sitm.crew_id, "
			+ "    SUM ( "
			+ "    CASE "
			+ "      WHEN NVL(SITM.WORK_TYPE,'NA') NOT IN "
			+ "        (SELECT work_type FROM crw_own.crw_work_type_mst WHERE dh_ind=1 "
			+ "        ) "
			+ "      THEN sitm.blck_hrs_mins "
			+ "      ELSE 0 "
			+ "    END) AS blk_hours, "
			+ "    SUM ( "
			+ "    CASE "
			+ "      WHEN NVL(SITM.WORK_TYPE,'NA') IN "
			+ "        (SELECT work_type FROM crw_own.crw_work_type_mst WHERE dh_ind=1 "
			+ "        ) "
			+ "      THEN sitm.dur_mins "
			+ "      ELSE 0 "
			+ "    END)                AS dh_hours, "
			+ "    COUNT (DISTINCT "
			+ "    CASE "
			+ "      WHEN NVL(SITM.WORK_TYPE,'NA') NOT IN "
			+ "        (SELECT work_type FROM crw_own.crw_work_type_mst WHERE dh_ind=1 "
			+ "        ) "
			+ "      AND sitm.item_type = 'F' "
			+ "      THEN sitm.item_ref_id "
			+ "      ELSE NULL "
			+ "    END ) AS flt_legs_operated "
			+ "  FROM "
			+ "    (SELECT crew_id, "
			+ "      work_type, "
			+ "      blck_hrs_mins, "
			+ "      dur_mins, "
			+ "      item_type, "
			+ "      item_ref_id , stat_date "
			+ "    FROM crw_own.crw_stat_item_pubd_snap sitm "
			+ "    WHERE sitm.stat_date BETWEEN TO_DATE ('" + startDate+ "', 'DD-Mon-YYYY') AND TO_DATE ('" + endDate + "', 'DD-Mon-YYYY') "
			+ "    AND sitm.delete_ind                        = 0 "
			+ "    AND (crew_id,crw_rost_pubd_id, stat_date) IN "
			+ "      (SELECT crew_id, "
			+ "        chg_txn_id, "
			+ "        dt.dt stat_date "
			+ "      FROM "
			+ "        (SELECT crew_id, "
			+ "          chg_txn_id, "
			+ "          stt_date, "
			+ "          TRUNC (end_date) end_date, "
			+ "          rank () over (partition BY crew_id, stt_date order by chg_txn_id DESC) rnk "
			+ "        FROM crw_own.crw_rost_hist "
			+ "        WHERE chg_type_code = 'RST_PUBLISHED' "
			+ "        AND stt_date BETWEEN to_date ('" + startDate+ "', 'DD-Mon-YYYY') AND to_date ('" + endDate + "', 'DD-Mon-YYYY') "
			+ "        AND delete_ind = 0 "
			+ "        ) pub, "
			+ "        (SELECT to_date('" + startDate+ "')+rownum-1 dt "
			+ "        FROM dual "
			+ "          CONNECT BY level <= to_date('" + endDate + "')-to_date('" + startDate+ "')+1 "
			+ "        ) dt "
			+ "      WHERE pub.rnk = 1 "
			+ "      AND dt.dt BETWEEN pub.stt_date AND end_date "
			+ "      ) "
			+ "    ) sitm "
			+ "  GROUP BY crew_id "
			+ "  ), "
			+ "  duty_stat AS "
			+ "  (SELECT sdut.crew_id, "
			+ "    SUM (sdut.duty_hrs_mins) AS duty_hrs "
			+ "  FROM crw_own.crw_stat_duty_pubd_snap sdut "
			+ "  WHERE sdut.stat_date BETWEEN TO_DATE ('" + startDate+ "', 'DD-Mon-YYYY') AND TO_DATE ('" + endDate + "', 'DD-Mon-YYYY') "
			+ "  AND sdut.delete_ind = 0 "
			+ "  GROUP BY sdut.crew_id "
			+ "  ) "
			+ "SELECT b.id,  b.stf_num, "
			+ "  b.dspy_name stf_name, "
			+ "  a.base, "
			+ "  a.flet, "
			+ "  a.RANK, "
			+ "  MST.RANK_DSPY_PRTY, "
			+ "  duty_stat.duty_hrs \"Duty Hrs\", "
			+ "  item_stat.blk_hours \"Block Hrs\", "
			+ "  item_stat.dh_hours \"Deadhead Hrs\", "
			+ "  item_stat.flt_legs_operated \"Flight Days\" "
			+ "FROM "
			+ "  (SELECT rank, "
			+ "    flet, "
			+ "    base, "
			+ "    crew_id, "
			+ "    eff_from_dt, "
			+ "    eff_to_dt, "
			+ "    crew_type "
			+ "  FROM "
			+ "    (select plm.rank, "
			+ "      plm.flet, "
			+ "      plm.base, "
			+ "      plm.crew_id, "
			+ "      eff_from_dt, "
			+ "      eff_to_dt, "
			+ "      plm.crew_type "
			+ "    FROM crw_own.crw_crw_plmt plm "
			+ "    WHERE plm.delete_ind = 0 "
			+ "    AND plm.eff_from_dt <= '" + endDate + "' "
			+ "    AND plm.eff_to_dt   >= '" + startDate+ "' "
			+ "    AND plm.base         = 'DOH' "
			+ "    ) "
			+ "  ) a, "
			+ "  crw_own.crw_crw_data b, "
			+ "  item_stat, "
			+ "  duty_stat, "
			+ "  crw_own.crw_rank_mst mst "
			+ "WHERE b.ID         = a.crew_id "
			+ "AND b.delete_ind   = 0 "
			+ "AND a.crew_id      = item_stat.crew_id(+) "
			+ "AND a.crew_id      = duty_stat.crew_id(+) "
			+ "AND mst.rank_code  = a.rank "
			+ "AND mst.delete_ind =0 "
			+ "AND a.base               = ? ");

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getStaffNumber())
					&& bulkCrewScheduleReportDTO.getStaffNumber().length() > 0) {
				temp = bulkCrewScheduleReportDTO.getStaffNumber().replaceAll(",", "','");
				// temp = temp.substring(0, temp.length() - 3);
				strBuffer.append(" AND b.stf_num IN ('" + temp + "')");
			}

			/*
			 * if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getRank()) &&
			 * bulkCrewScheduleReportDTO.getRank().length() > 0) { temp =
			 * bulkCrewScheduleReportDTO.getRank().replaceAll(",", "','");
			 * strBuffer.append(" AND a.rank IN ('" + temp + "')"); }
			 */
			/*
			 * if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getFleet()) &&
			 * bulkCrewScheduleReportDTO.getFleet().length() > 0) { temp =
			 * bulkCrewScheduleReportDTO.getFleet().replaceAll(",", "','");
			 * strBuffer.append(" AND a.flet IN ('" + temp + "')"); }
			 */

			strBuffer.append(" order by b.stf_num");

			preparedStatement = connection.prepareStatement(strBuffer.toString());
			preparedStatement.setString(1, base);
			String crewIdHrs = null;

			long setTime = System.currentTimeMillis();
			resultSet = preparedStatement.executeQuery();
			setTime2 = System.currentTimeMillis() - setTime;
			System.out.println(
					"Bulk Crew Schedule  Report --> Time Taken to fetch the Statistics ResultSet from DB: " + setTime2);

			BulkCrewScheduleReportSO forTotalStats = new BulkCrewScheduleReportSO();
			String previousCrewId = "";

			while (resultSet.next()) {
				crewIdHrs = resultSet.getString("ID");

				if (!StringUtils.isEmpty(previousCrewId) && !previousCrewId.equals(crewIdHrs)
						&& null != forTotalStats) {
					mapFromResultSetProcessing.put(previousCrewId, forTotalStats);
				}
				if (StringUtils.isEmpty(previousCrewId) || !previousCrewId.equals(crewIdHrs)) {
					forTotalStats = mapFromResultSetProcessing.get(crewIdHrs);
				}

				if (null != forTotalStats) {
					if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.Duty_Hrs)))
						forTotalStats.setDutyHrs(calculateHourAndMinute(
								Integer.parseInt(resultSet.getString(BulkCrewScheduleReportTable.Duty_Hrs))));
					if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs)))
						forTotalStats.setBlockHrs(calculateHourAndMinute(
								Integer.parseInt(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs))));
					if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs)))
						forTotalStats.setDeadHDHrs(calculateHourAndMinute(
								Integer.parseInt(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs))));
					if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.Flight_Days)))
						forTotalStats.setFlightDays(resultSet.getString(BulkCrewScheduleReportTable.Flight_Days));

				}

				previousCrewId = crewIdHrs;

			}
			mapFromResultSetProcessing.put(crewIdHrs, forTotalStats);

		} catch (Exception e) {
			e.printStackTrace();
		} finally

		{
			try {
				close(connection, preparedStatement, resultSet);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		long setTime3 = System.currentTimeMillis() - setTime2;
		System.out.println(
				"Bulk Crew Schedule  Report --> Time Taken to process AND integrate the Statistics into BulkSO map: "
						+ setTime3);
		return mapFromResultSetProcessing;

	}

	private Map<String, BulkCrewScheduleReportSO> setDailyStatisticsInBulkSOMap(List<String> datesInRange,
			Map<String, BulkCrewScheduleReportSO> mapFromResultSetProcessing,
			BulkCrewScheduleReportDTO bulkCrewScheduleReportDTO) {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Connection connection = null;
		String startDate = null;
		String endDate = null;
		String base = null;
		String temp = null;
		Long setTime2 = 0L;
		SimpleDateFormat myFormat2 = new SimpleDateFormat("dd-MMM-yy");
		SimpleDateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDateRange())) {

			String[] period = bulkCrewScheduleReportDTO.getDateRange().split(BulkCrewScheduleReportTable.TO);
			startDate = period[0].trim();
			endDate = period[1].trim();
		}

		try {

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getBase())
					&& bulkCrewScheduleReportDTO.getBase().length() > 0) {
				base = bulkCrewScheduleReportDTO.getBase();
			}

			System.out.println("------------Entering Schedule Data Set---------------");
			connection = getConnection();
			StringBuffer strBuffer = new StringBuffer();

			strBuffer = new StringBuffer();

			strBuffer.append(" WITH item_stat AS " + "  (SELECT sitm.crew_id, " + "    stat_date, " + "    SUM ( "
					+ "    CASE " 
					+ "      WHEN sitm.work_type NOT  IN (select work_type from crw_own.CRW_WORK_TYPE_MST where dh_ind=1  and delete_ind = 0 )"
					+ "      THEN sitm.blck_hrs_mins "
					+ "      ELSE 0 " 
					+ "    END) AS blk_hours, " 
					+ "    SUM ( " 
					+ "    CASE "
					+ "      WHEN sitm.work_type IN (select work_type from crw_own.CRW_WORK_TYPE_MST where dh_ind=1  and delete_ind = 0 )"
					+ "      THEN sitm.dur_mins " 
					+ "      ELSE 0 "
					+ "    END) AS dh_hours " 
					+ "  FROM crw_own.crw_stat_item sitm "
					+ "  WHERE sitm.stat_date BETWEEN TO_DATE ('" + startDate + "', 'DD-Mon-YYYY') AND TO_DATE ('"
					+ endDate + "', 'DD-Mon-YYYY') " + "  AND sitm.delete_ind = 0 " + "  GROUP BY crew_id, "
					+ "    stat_date " + "  ), " + "  duty_stat AS " + "  ( SELECT DISTINCT sdut.crew_id, "
					+ "    stat_date, " + "    SUM (sdut.duty_hrs_mins) AS duty_hrs "
					+ "  FROM crw_own.crw_stat_duty sdut " + "  WHERE sdut.stat_date BETWEEN to_date('" + startDate
					+ "', 'DD-Mon-YYYY') AND to_date ('" + endDate + "', 'DD-Mon-YYYY') " + "  AND sdut.delete_ind = 0 "
					+ "  GROUP BY sdut.crew_id, " + "    stat_date " + "  ), " + "  t_stat_month AS "
					+ "  ( SELECT DISTINCT DAT " + "  FROM " + "    (SELECT to_date ('" + startDate
					+ "', 'DD-Mon-YYYY') -1 + level DAT " + "    FROM dual " + "      CONNECT BY level <= "
					+ "      (SELECT to_date ('" + endDate + "', 'DD-Mon-YYYY') - to_date ('" + startDate
					+ "', 'DD-Mon-YYYY') +1 days " + "      FROM dual " + "      ) " + "    ) " + "  ) "
					+ "SELECT b.stf_num, " + "  b.id AS crew_id, " + "  t_stat_month.DAT , "
					+ "  NVL(duty_stat.duty_hrs,0) \"Duty Hrs\", " + "  NVL(item_stat.blk_hours,0) \"Block Hrs\", "
					+ "  NVL(item_stat.dh_hours,0) \"Deadhead Hrs\" " + "FROM crw_own.crw_crw_plmt a, "
					+ "  crw_own.crw_crw_data b, " + "  item_stat, " + "  duty_stat, " + "  t_stat_month "
					+ "WHERE b.id       = a.crew_id " + "AND a.delete_ind = 0 " + "AND b.delete_ind = 0 "
					+ "AND to_date ('" + endDate + "', 'DD-Mon-YYYY') BETWEEN a.eff_from_dt AND a.eff_to_dt "
					+ "AND a.crew_id              = item_stat.crew_id(+) "
					+ "AND a.crew_id              = duty_stat.crew_id(+) "
					+ "AND t_stat_month.DAT = item_stat.stat_date(+) "
					+ "AND t_stat_month.DAT = duty_stat.stat_date(+) " + "AND (item_stat.blk_hours   > 0 "
					+ "OR duty_stat.duty_hrs      > 0)  " + "AND a.base   = ? ");

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getStaffNumber())
					&& bulkCrewScheduleReportDTO.getStaffNumber().length() > 0) {
				temp = bulkCrewScheduleReportDTO.getStaffNumber().replaceAll(",", "','");
				// temp = temp.substring(0, temp.length() - 3);
				strBuffer.append(" AND b.stf_num IN ('" + temp + "')");
			}

			strBuffer.append(" ORDER BY b.stf_num, t_stat_month.DAT ");

			preparedStatement = connection.prepareStatement(strBuffer.toString());
			preparedStatement.setString(1, base);
			String crewIdForDailyStats = null;

			long setTime = System.currentTimeMillis();
			resultSet = preparedStatement.executeQuery();
			setTime2 = System.currentTimeMillis() - setTime;
			System.out.println(
					"Bulk Crew Schedule  Report --> Time Taken to fetch the Statistics ResultSet from DB: " + setTime2);
			setTime2 = System.currentTimeMillis();
			BulkCrewScheduleReportSO forDailyStats = new BulkCrewScheduleReportSO();
			String previousCrewId = "";

			while (resultSet.next()) {
				crewIdForDailyStats = resultSet.getString(BulkCrewScheduleReportTable.CRW_DTL);

				if (StringUtils.isEmpty(previousCrewId) || !previousCrewId.equals(crewIdForDailyStats)) {
					forDailyStats = mapFromResultSetProcessing.get(crewIdForDailyStats);
				}
				if (!StringUtils.isEmpty(previousCrewId) && !previousCrewId.equals(crewIdForDailyStats)) {
					mapFromResultSetProcessing.put(crewIdForDailyStats, forDailyStats);

				}
				if (null != forDailyStats) {

					String date = resultSet.getString(BulkCrewScheduleReportTable.DATE);
					Date dateFormat1 = myFormat.parse(date);
					String finalDate = myFormat2.format(dateFormat1);
					finalDate = finalDate.substring(0, finalDate.length() - 3);

					String index = Integer.toString(getIndexFromDateRange(datesInRange, finalDate));

					if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.Duty_Hrs)))
						forDailyStats.setDailyDutyHours(index, calculateHourAndMinute(
								Integer.parseInt(resultSet.getString(BulkCrewScheduleReportTable.Duty_Hrs))));
					if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs)))
						forDailyStats.setDailyBlockHours(index, calculateHourAndMinute(
								Integer.parseInt(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs))));
					/*
					 * if ("0".equals(resultSet.getString(
					 * BulkCrewScheduleReportTable.Block_Hrs)))
					 * forDailyStats.setShowDailyDHD(index, "false"); if
					 * (!"0".equals(resultSet.getString(
					 * BulkCrewScheduleReportTable.Block_Hrs)))
					 * forDailyStats.setShowDailyDHD(index, "true");
					 */
					if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs)))
						forDailyStats.setDailyDHDHours(index, calculateHourAndMinute(
								Integer.parseInt(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs))));
					if ("0".equals(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs))
							&& "0".equals(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs)))
						forDailyStats.setShowDailyDHD(index, BulkCrewScheduleReportTable.FALSE);
					if (!"0".equals(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs))
							&& !"0".equals(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs))
							&& (!StringUtils.isEmpty(forDailyStats.getCrewSchdeule(
									Integer.toString(getIndexFromDateRange(datesInRange, finalDate) - 1))) || "0".equals(Integer.toString(getIndexFromDateRange(datesInRange, finalDate) - 1)))
							&& !StringUtils.isEmpty(forDailyStats.getCrewSchdeule(
									Integer.toString(getIndexFromDateRange(datesInRange, finalDate) + 1)))) {
						forDailyStats.setShowDailyDHD(index, BulkCrewScheduleReportTable.TRUE);
						forDailyStats.setActivityCat(index, "WRK");
					}
					if (!"0".equals(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs))
							&& "0".equals(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs))
							&& (!StringUtils.isEmpty(forDailyStats.getCrewSchdeule(
									Integer.toString(getIndexFromDateRange(datesInRange, finalDate) - 1))) || "0".equals(Integer.toString(getIndexFromDateRange(datesInRange, finalDate) - 1)))
							&& !StringUtils.isEmpty(forDailyStats.getCrewSchdeule(
									Integer.toString(getIndexFromDateRange(datesInRange, finalDate) + 1)))) {
						forDailyStats.setShowDailyDHD(index, BulkCrewScheduleReportTable.TRUE);
						forDailyStats.setActivityCat(index, BulkCrewScheduleReportTable.WRK);
					}

					if ("0".equals(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs))
							&& !"0".equals(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs))
							&& (!StringUtils.isEmpty(forDailyStats.getCrewSchdeule(
									Integer.toString(getIndexFromDateRange(datesInRange, finalDate) - 1))) || "0".equals(Integer.toString(getIndexFromDateRange(datesInRange, finalDate) - 1)))
							&& !StringUtils.isEmpty(forDailyStats.getCrewSchdeule(
									Integer.toString(getIndexFromDateRange(datesInRange, finalDate) + 1)))) {
						forDailyStats.setShowDailyDHD(index, BulkCrewScheduleReportTable.TRUE);
						forDailyStats.setActivityCat(index, BulkCrewScheduleReportTable.WRK);
					}

					previousCrewId = crewIdForDailyStats;

				}
				mapFromResultSetProcessing.put(crewIdForDailyStats, forDailyStats);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally

		{
			try {
				close(connection, preparedStatement, resultSet);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		long setTime3 = System.currentTimeMillis() - setTime2;
		System.out.println(
				"Bulk Crew Schedule  Report --> Time Taken to process AND integrate the Daily Statistics into BulkSO map: "
						+ setTime3);
		return mapFromResultSetProcessing;

	}
	
	private Map<String, BulkCrewScheduleReportSO> setDailyStatisticsInBulkSOMapPublished(List<String> datesInRange,
			Map<String, BulkCrewScheduleReportSO> mapFromResultSetProcessing,
			BulkCrewScheduleReportDTO bulkCrewScheduleReportDTO) {
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Connection connection = null;
		String startDate = null;
		String endDate = null;
		String base = null;
		String temp = null;
		Long setTime2 = 0L;
		SimpleDateFormat myFormat2 = new SimpleDateFormat("dd-MMM-yy");
		SimpleDateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDateRange())) {

			String[] period = bulkCrewScheduleReportDTO.getDateRange().split(BulkCrewScheduleReportTable.TO);
			startDate = period[0].trim();
			endDate = period[1].trim();
		}

		try {

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getBase())
					&& bulkCrewScheduleReportDTO.getBase().length() > 0) {
				base = bulkCrewScheduleReportDTO.getBase();
			}

			System.out.println("------------Entering Schedule Data Set---------------");
			connection = getConnection();
			StringBuffer strBuffer = new StringBuffer();

			strBuffer = new StringBuffer();

/*			strBuffer.append(" WITH item_stat AS " + "  (SELECT sitm.crew_id, " + "    stat_date, " + "    SUM ( "
					+ "    CASE " + "      WHEN sitm.work_type NOT IN ('DH','DX','DO') " + "      THEN sitm.blck_hrs_mins "
					+ "      ELSE 0 " + "    END) AS blk_hours, " + "    SUM ( " + "    CASE "
					+ "      WHEN sitm.work_type IN ('DH','DX','DO') " + "      THEN sitm.dur_mins " + "      ELSE 0 "
					+ "    END) AS dh_hours " + "  FROM crw_own.crw_stat_item sitm "
					+ "  WHERE sitm.stat_date BETWEEN TO_DATE ('" + startDate + "', 'DD-Mon-YYYY') AND TO_DATE ('"
					+ endDate + "', 'DD-Mon-YYYY') " + "  AND sitm.delete_ind = 0 " + "  GROUP BY crew_id, "
					+ "    stat_date " + "  ), " + "  duty_stat AS " + "  ( SELECT DISTINCT sdut.crew_id, "
					+ "    stat_date, " + "    SUM (sdut.duty_hrs_mins) AS duty_hrs "
					+ "  FROM crw_own.crw_stat_duty sdut " + "  WHERE sdut.stat_date BETWEEN to_date('" + startDate
					+ "', 'DD-Mon-YYYY') AND to_date ('" + endDate + "', 'DD-Mon-YYYY') " + "  AND sdut.delete_ind = 0 "
					+ "  GROUP BY sdut.crew_id, " + "    stat_date " + "  ), " + "  t_stat_month AS "
					+ "  ( SELECT DISTINCT DAT " + "  FROM " + "    (SELECT to_date ('" + startDate
					+ "', 'DD-Mon-YYYY') -1 + level DAT " + "    FROM dual " + "      CONNECT BY level <= "
					+ "      (SELECT to_date ('" + endDate + "', 'DD-Mon-YYYY') - to_date ('" + startDate
					+ "', 'DD-Mon-YYYY') +1 days " + "      FROM dual " + "      ) " + "    ) " + "  ) "
					+ "SELECT b.stf_num, " + "  b.id AS crew_id, " + "  t_stat_month.DAT , "
					+ "  NVL(duty_stat.duty_hrs,0) \"Duty Hrs\", " + "  NVL(item_stat.blk_hours,0) \"Block Hrs\", "
					+ "  NVL(item_stat.dh_hours,0) \"Deadhead Hrs\" " + "FROM crw_own.crw_crw_plmt a, "
					+ "  crw_own.crw_crw_data b, " + "  item_stat, " + "  duty_stat, " + "  t_stat_month "
					+ "WHERE b.id       = a.crew_id " + "AND a.delete_ind = 0 " + "AND b.delete_ind = 0 "
					+ "AND to_date ('" + endDate + "', 'DD-Mon-YYYY') BETWEEN a.eff_from_dt AND a.eff_to_dt "
					+ "AND a.crew_id              = item_stat.crew_id(+) "
					+ "AND a.crew_id              = duty_stat.crew_id(+) "
					+ "AND t_stat_month.DAT = item_stat.stat_date(+) "
					+ "AND t_stat_month.DAT = duty_stat.stat_date(+) " + "AND (item_stat.blk_hours   > 0 "
					+ "OR duty_stat.duty_hrs      > 0)  " + "AND a.base   = ? ");*/
			
			strBuffer.append("WITH item_stat AS "
			+ "  (SELECT sitm.crew_id, "
			+ "   sitm.stat_date, "
			+ "    SUM ( "
			+ "    CASE "
			+ "      WHEN NVL(SITM.WORK_TYPE,'NA') NOT IN "
			+ "        (SELECT work_type FROM crw_own.crw_work_type_mst WHERE dh_ind=1 "
			+ "        ) "
			+ "      THEN sitm.blck_hrs_mins "
			+ "      ELSE 0 "
			+ "    END) AS blk_hours, "
			+ "    SUM ( "
			+ "    CASE "
			+ "      WHEN NVL(SITM.WORK_TYPE,'NA') IN "
			+ "        (SELECT work_type FROM crw_own.crw_work_type_mst WHERE dh_ind=1 "
			+ "        ) "
			+ "      THEN sitm.dur_mins "
			+ "      ELSE 0 "
			+ "    END)                AS dh_hours "
			+ "  FROM "
			+ "    (SELECT crew_id, stat_date, "
			+ "      work_type, "
			+ "      blck_hrs_mins, "
			+ "      dur_mins "
			+ "    FROM crw_own.crw_stat_item_pubd_snap sitm "
			+ "    WHERE sitm.stat_date BETWEEN TO_DATE ('" + startDate+ "', 'DD-Mon-YYYY') AND TO_DATE ('" + endDate + "', 'DD-Mon-YYYY') "
			+ "    AND sitm.delete_ind                        = 0 "
			+ "    AND (crew_id,crw_rost_pubd_id, stat_date) IN "
			+ "      (SELECT crew_id, "
			+ "        chg_txn_id, "
			+ "        dt.dt stat_date "
			+ "      FROM "
			+ "        (SELECT crew_id, "
			+ "          chg_txn_id, "
			+ "          stt_date, "
			+ "          TRUNC (end_date) end_date, "
			+ "          rank () over (partition BY crew_id, stt_date order by chg_txn_id DESC) rnk "
			+ "        FROM crw_own.crw_rost_hist "
			+ "        WHERE chg_type_code = 'RST_PUBLISHED' "
			+ "        AND stt_date BETWEEN to_date ('" + startDate+ "', 'DD-Mon-YYYY') AND to_date ('" + endDate + "', 'DD-Mon-YYYY') "
			+ "        AND delete_ind = 0 "
			+ "        ) pub, "
			+ "        (SELECT to_date('" + startDate+ "')+rownum-1 dt "
			+ "        FROM dual "
			+ "          CONNECT BY level <= to_date('" + endDate + "')-to_date('" + startDate+ "')+1 "
			+ "        ) dt "
			+ "      WHERE pub.rnk = 1 "
			+ "      AND dt.dt BETWEEN pub.stt_date AND end_date "
			+ "      ) "
			+ "    ) sitm "
			+ "  GROUP BY crew_id , stat_date "
			+ "  ), "
			+ "  duty_stat AS "
			+ "  (SELECT sdut.crew_id, stat_date, "
			+ "    SUM (sdut.duty_hrs_mins) AS duty_hrs "
			+ "  FROM crw_own.crw_stat_duty_pubd_snap sdut "
			+ "  WHERE sdut.stat_date BETWEEN TO_DATE ('" + startDate+ "', 'DD-Mon-YYYY') AND TO_DATE ('" + endDate + "', 'DD-Mon-YYYY') "
			+ "  AND sdut.delete_ind = 0 "
			+ "  GROUP BY sdut.crew_id , stat_date "
			+ "  ) , "
			+ "  t_stat_month AS "
			+ "  ( SELECT DISTINCT DAT "
			+ "  FROM "
			+ "    (SELECT to_date ('" + startDate+ "', 'DD-Mon-YYYY') -1 + level DAT "
			+ "    FROM dual "
			+ "      CONNECT BY level <= "
			+ "      (SELECT to_date ('" + endDate + "', 'DD-Mon-YYYY') - to_date ('" + startDate+ "', 'DD-Mon-YYYY') +1 days "
			+ "      FROM dual "
			+ "      ) "
			+ "    ) "
			+ "  ) "
			+ "SELECT b.stf_num, "
			+ "  b.id AS crew_id, "
			+ "  t_stat_month.DAT , "
			+ "  NVL(duty_stat.duty_hrs,0) \"Duty Hrs\", "
			+ "  NVL(item_stat.blk_hours,0) \"Block Hrs\", "
			+ "  NVL(item_stat.dh_hours,0) \"Deadhead Hrs\" "
			+ "FROM crw_own.crw_crw_plmt a, "
			+ "  crw_own.crw_crw_data b, "
			+ "  item_stat, "
			+ "  duty_stat, "
			+ "  t_stat_month "
			+ "WHERE b.id       = a.crew_id "
			+ "AND a.delete_ind = 0 "
			+ "AND b.delete_ind = 0 "
			+ "AND to_date ('" + endDate + "', 'DD-Mon-YYYY') BETWEEN a.eff_from_dt AND a.eff_to_dt "
			+ "AND a.crew_id            = item_stat.crew_id(+) "
			+ "AND a.crew_id            = duty_stat.crew_id(+) "
			+ "AND t_stat_month.DAT     = item_stat.stat_date(+) "
			+ "AND t_stat_month.DAT     = duty_stat.stat_date(+) "
			+ "AND (item_stat.blk_hours > 0 "
			+ "OR duty_stat.duty_hrs    > 0) "
			+ "AND a.base               = ? ");

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getStaffNumber())
					&& bulkCrewScheduleReportDTO.getStaffNumber().length() > 0) {
				temp = bulkCrewScheduleReportDTO.getStaffNumber().replaceAll(",", "','");
				// temp = temp.substring(0, temp.length() - 3);
				strBuffer.append(" AND b.stf_num IN ('" + temp + "')");
			}

			strBuffer.append(" ORDER BY b.stf_num, t_stat_month.DAT ");

			preparedStatement = connection.prepareStatement(strBuffer.toString());
			preparedStatement.setString(1, base);
			String crewIdForDailyStats = null;

			long setTime = System.currentTimeMillis();
			resultSet = preparedStatement.executeQuery();
			setTime2 = System.currentTimeMillis() - setTime;
			System.out.println(
					"Bulk Crew Schedule  Report --> Time Taken to fetch the Statistics ResultSet from DB: " + setTime2);
			setTime2 = System.currentTimeMillis();
			BulkCrewScheduleReportSO forDailyStats = new BulkCrewScheduleReportSO();
			String previousCrewId = "";

			while (resultSet.next()) {
				crewIdForDailyStats = resultSet.getString(BulkCrewScheduleReportTable.CRW_DTL);

				if (StringUtils.isEmpty(previousCrewId) || !previousCrewId.equals(crewIdForDailyStats)) {
					forDailyStats = mapFromResultSetProcessing.get(crewIdForDailyStats);
				}
				if (!StringUtils.isEmpty(previousCrewId) && !previousCrewId.equals(crewIdForDailyStats)) {
					mapFromResultSetProcessing.put(crewIdForDailyStats, forDailyStats);

				}
				if (null != forDailyStats) {

					String date = resultSet.getString(BulkCrewScheduleReportTable.DATE);
					Date dateFormat1 = myFormat.parse(date);
					String finalDate = myFormat2.format(dateFormat1);
					finalDate = finalDate.substring(0, finalDate.length() - 3);

					String index = Integer.toString(getIndexFromDateRange(datesInRange, finalDate));

					if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.Duty_Hrs)))
						forDailyStats.setDailyDutyHours(index, calculateHourAndMinute(
								Integer.parseInt(resultSet.getString(BulkCrewScheduleReportTable.Duty_Hrs))));
					if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs)))
						forDailyStats.setDailyBlockHours(index, calculateHourAndMinute(
								Integer.parseInt(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs))));
					/*
					 * if ("0".equals(resultSet.getString(
					 * BulkCrewScheduleReportTable.Block_Hrs)))
					 * forDailyStats.setShowDailyDHD(index, "false"); if
					 * (!"0".equals(resultSet.getString(
					 * BulkCrewScheduleReportTable.Block_Hrs)))
					 * forDailyStats.setShowDailyDHD(index, "true");
					 */
					if (!StringUtils.isEmpty(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs)))
						forDailyStats.setDailyDHDHours(index, calculateHourAndMinute(
								Integer.parseInt(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs))));
					if ("0".equals(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs))
							&& "0".equals(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs)))
						forDailyStats.setShowDailyDHD(index, BulkCrewScheduleReportTable.FALSE);
					if (!"0".equals(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs))
							&& !"0".equals(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs))
							&& (!StringUtils.isEmpty(forDailyStats.getCrewSchdeule(
									Integer.toString(getIndexFromDateRange(datesInRange, finalDate) - 1))) || "0".equals(Integer.toString(getIndexFromDateRange(datesInRange, finalDate) - 1)))
							/*&& !StringUtils.isEmpty(forDailyStats.getCrewSchdeule(
									Integer.toString(getIndexFromDateRange(datesInRange, finalDate) + 1)))*/) {
						forDailyStats.setShowDailyDHD(index, BulkCrewScheduleReportTable.TRUE);
						forDailyStats.setActivityCat(index, "WRK");
					}
					if (!"0".equals(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs))
							&& "0".equals(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs))
							&& (!StringUtils.isEmpty(forDailyStats.getCrewSchdeule(
									Integer.toString(getIndexFromDateRange(datesInRange, finalDate) - 1))) || "0".equals(Integer.toString(getIndexFromDateRange(datesInRange, finalDate) - 1)))
							/*&& !StringUtils.isEmpty(forDailyStats.getCrewSchdeule(
									Integer.toString(getIndexFromDateRange(datesInRange, finalDate) + 1)))*/) {
						forDailyStats.setShowDailyDHD(index, BulkCrewScheduleReportTable.TRUE);
						forDailyStats.setActivityCat(index, BulkCrewScheduleReportTable.WRK);
					}

					if ("0".equals(resultSet.getString(BulkCrewScheduleReportTable.Block_Hrs))
							&& !"0".equals(resultSet.getString(BulkCrewScheduleReportTable.DHD_Hrs))
							&& (!StringUtils.isEmpty(forDailyStats.getCrewSchdeule(
									Integer.toString(getIndexFromDateRange(datesInRange, finalDate) - 1))) || "0".equals(Integer.toString(getIndexFromDateRange(datesInRange, finalDate) - 1)))
							/*&& !StringUtils.isEmpty(forDailyStats.getCrewSchdeule(
									Integer.toString(getIndexFromDateRange(datesInRange, finalDate) + 1)))*/) {
						forDailyStats.setShowDailyDHD(index, BulkCrewScheduleReportTable.TRUE);
						forDailyStats.setActivityCat(index, BulkCrewScheduleReportTable.WRK);
					}

					previousCrewId = crewIdForDailyStats;

				}
				mapFromResultSetProcessing.put(crewIdForDailyStats, forDailyStats);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally

		{
			try {
				close(connection, preparedStatement, resultSet);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		long setTime3 = System.currentTimeMillis() - setTime2;
		System.out.println(
				"Bulk Crew Schedule  Report --> Time Taken to process AND integrate the Daily Statistics into BulkSO map: "
						+ setTime3);
		return mapFromResultSetProcessing;

	}

	private Map<String, BulkCrewScheduleReportSO> setNotesIndicatorInBulkSOMap(List<String> datesInRange,
			Map<String, BulkCrewScheduleReportSO> mapFromResultSetProcessing,
			BulkCrewScheduleReportDTO bulkCrewScheduleReportDTO) {
		PreparedStatement preparedStatement = null;
		StringBuffer strBuffer;
		ResultSet resultSet = null;
		Connection connection = null;
		String startDate = null;
		String endDate = null;
		String temp = null;
		String timesIn = null;
		//Integer baseTime = null;
		String previousCrewId = "";
		SimpleDateFormat myFormat2 = new SimpleDateFormat("dd-MMM-yy");
		SimpleDateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {

			System.out.println("------------Entering Schedule Data Set---------------");
			connection = getConnection();
			strBuffer = new StringBuffer();
			String crewId = null;

/*			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getTimesIn())
					&& bulkCrewScheduleReportDTO.getTimesIn().length() > 0) {
				timesIn = bulkCrewScheduleReportDTO.getTimesIn();
			}*/
			
			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getTimesIn())
					&& bulkCrewScheduleReportDTO.getTimesIn().length() > 0) {
				if ("DOH".equalsIgnoreCase(bulkCrewScheduleReportDTO.getTimesIn())) {
/*					String baseStr = personalCrewScheduleReportDTO.getBaseValue();
					String timeDiff = baseStr.substring(baseStr.indexOf('(') + 1, baseStr.indexOf(')')).replace('.',
							':');
					String[] timeDiffArr = timeDiff.split(":");*/
					//baseTime = 180;
					//timesIn = personalCrewScheduleReportDTO.getTimesIn();
					timesIn = "Local";
				} else
					timesIn = bulkCrewScheduleReportDTO.getTimesIn();
			}

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDateRange())) {

				String[] period = bulkCrewScheduleReportDTO.getDateRange().split(BulkCrewScheduleReportTable.TO);
				startDate = period[0].trim();
				endDate = period[1].trim();
			}
			
/*			strBuffer.append("WITH t AS " 
			+ "  (SELECT d.crew_id AS crew_id, " 
					+ " CASE "
					+ "      when ( "
					+ "      select acy.FULL_DAY_IND from crw_own.crw_acy acy,crw_own.crw_rost rost where acy.delete_ind = 0 "
					+ "      and rost.delete_ind = 0 "
					+ "      and rost.ASGN_REF_ID = acy.ID "
					+ "      and rost.id = m.enty_ref_id "
					+ "      ) =1 "
					+ "      then m.EFF_FROM_DT + 180/1440"
					//+ "   CASE " 
					+ "      WHEN '" + timesIn + "' = 'UTC' "
					+ "		 THEN m.EFF_FROM_DT " 
					+ "      WHEN '" + timesIn + "' = 'Local'  "
					+ "		 AND  m.enty_type = 'D'"
					+ "		 THEN m.EFF_FROM_DT " 
					+ "      WHEN '" + timesIn+"' = 'Local' "
					+ "		 OR '" + timesIn+ "' = 'BASE'"
					+ "		 THEN m.EFF_FROM_DT + 180/1440 " 
					+ "   END stt_date, " 
					+ "   CASE "
					+ "      WHEN '" + timesIn + "' = 'UTC' "
					+ "		 THEN m.EFF_TO_DT " 
					+ "      WHEN '" + timesIn + "' = 'Local'  "
					+ "		 AND  m.enty_type = 'D'"
					+ "		 THEN m.EFF_TO_DT " 
					+ "      WHEN '" + timesIn+ "' = 'Local'  "
					+ "		 OR '" + timesIn+ "' = 'BASE'"
					+ "		 THEN m.EFF_TO_DT + 180/1440 " 
					+ "   END end_Date, " 
					+ "   note_msg_type as IND "
					+ "  FROM crw_own.crw_note_msg m, " 
					+ "  CRW_OWN.CRW_NOTE_MSG_CRI_CREW d "
					+ "  WHERE m.delete_ind  =   0 " 
					+ "  AND d.delete_ind    =   0 ");

			if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getCrewId())
					&& bulkCrewScheduleReportDTO.getCrewId().length() > 0) {
				crewId = bulkCrewScheduleReportDTO.getCrewId();
				temp = crewId.replaceAll(",", "','");
				strBuffer.append(" AND d.crew_id IN ('" + temp + "') ");
			}
			
			if ((!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getNotesIndicator()) && BulkCrewScheduleReportTable.TRUE.equals(bulkCrewScheduleReportDTO.getNotesIndicator())) 
					&& (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getMessageIndicator())
							&& BulkCrewScheduleReportTable.TRUE.equals(bulkCrewScheduleReportDTO.getMessageIndicator()))) 
			{
				strBuffer.append(" AND m.note_msg_type IN  ('N','M')");
			}
			
			else if((!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getNotesIndicator()) && BulkCrewScheduleReportTable.TRUE.equals(bulkCrewScheduleReportDTO.getNotesIndicator())) 
					&&  StringUtils.isEmpty(bulkCrewScheduleReportDTO.getMessageIndicator()))
			{
				strBuffer.append(" AND m.note_msg_type IN  ('N')");
			}
			else if((!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getMessageIndicator()) && BulkCrewScheduleReportTable.TRUE.equals(bulkCrewScheduleReportDTO.getMessageIndicator())) 
					&&  StringUtils.isEmpty(bulkCrewScheduleReportDTO.getNotesIndicator()))
					{
				strBuffer.append(" AND m.note_msg_type IN  ('M')");
					}
			
			
			strBuffer.append("and case when m.note_msg_type = 'N' then 1 "
					+ "  when m.note_msg_type = 'M' and exists (select dtl.CRW_NOTE_MSG_ID from  crw_own.crw_msg_dtl dtl where dtl.DELETE_IND = 0 and dtl.CRW_NOTE_MSG_ID = m.id) then 1 end =1 ");


			strBuffer.append(" AND m.id      =   d.crw_note_msg_id " 
					+ "  AND m.EFF_FROM_DT between to_date('" + startDate
					+ " 00:00:00','DD-MON-YY HH24:MI:SS') AND to_date('" + endDate
					+ " 23:59:59','DD-MON-YY HH24:MI:SS') " 
					+ "  ) " 
					+ " SELECT crew_id, "
					+ "  m.column_value+ TRUNC(stt_date - 1), " 
					+ "  ind " 
					+ " FROM t, " 
					+ "  TABLE (CAST (MULTISET " 
					+ "  (SELECT LEVEL l " + "  FROM DUAL "
					+ "    CONNECT BY LEVEL <= TRUNC(t.end_date)- TRUNC(t.stt_date) + 1 "
					+ "  ) AS SYS.odcinumberlist ) )m " 
					+ " ORDER BY crew_id , " 
					+ "  M.COLUMN_VALUE+TRUNC(STT_DATE-1)");*/
			
			strBuffer.append("WITH t AS "
			+ "  (select crew_id, stt_date, end_date,ind from (");
					
			
			 if((!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getNotesIndicator()) && BulkCrewScheduleReportTable.TRUE.equals(bulkCrewScheduleReportDTO.getNotesIndicator())))
				{
					strBuffer.append("SELECT d.crew_id AS crew_id, " 
							+ " CASE "
							+ "      when ( "
							+ "      select acy.FULL_DAY_IND from crw_own.crw_acy acy,crw_own.crw_rost rost where acy.delete_ind = 0 "
							+ "      and rost.delete_ind = 0 "
							+ "      and rost.ASGN_REF_ID = acy.ID "
							+ "      and rost.id = m.enty_ref_id "
							+ "      ) =1 "
							+ "      then m.EFF_FROM_DT + 180/1440"
							//+ "   CASE " 
							+ "      WHEN '" + timesIn + "' = 'UTC' "
							+ "		 THEN m.EFF_FROM_DT " 
							+ "      WHEN '" + timesIn + "' = 'Local'  "
							+ "		 AND  m.enty_type = 'D'"
							+ "		 THEN m.EFF_FROM_DT " 
							+ "      WHEN '" + timesIn+"' = 'Local' "
							+ "		 OR '" + timesIn+ "' = 'BASE'"
							+ "		 THEN m.EFF_FROM_DT + 180/1440 " 
							+ "   END stt_date, " 
							+ "   CASE "
							+ "      WHEN '" + timesIn + "' = 'UTC' "
							+ "		 THEN m.EFF_TO_DT " 
							+ "      WHEN '" + timesIn + "' = 'Local'  "
							+ "		 AND  m.enty_type = 'D'"
							+ "		 THEN m.EFF_TO_DT " 
							+ "      WHEN '" + timesIn+ "' = 'Local'  "
							+ "		 OR '" + timesIn+ "' = 'BASE'"
							+ "		 THEN m.EFF_TO_DT + 180/1440 " 
							+ "   END end_Date, " 
								+ "     note_msg_type AS IND " 
								+ "     FROM crw_own.crw_note_msg m, "
								+ "     CRW_OWN.CRW_NOTE_MSG_CRI_CREW d " 
								+ "    WHERE m.delete_ind = 0 " 
								+ "  AND d.delete_ind   = 0 ");
								
								if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getCrewId())
										&& bulkCrewScheduleReportDTO.getCrewId().length() > 0) {
									crewId = bulkCrewScheduleReportDTO.getCrewId();
									temp = crewId.replaceAll(",", "','");
									strBuffer.append(" AND d.crew_id IN ('" + temp + "') ");
								}
								
								strBuffer.append("  AND m.note_msg_type = 'N' "
								+ "  AND m.id = d.crw_note_msg_id "
								+ "  AND m.EFF_FROM_DT BETWEEN to_date('" + startDate
								+ " 00:00:00','DD-MON-YY HH24:MI:SS') AND to_date('" + endDate
								+ " 23:59:59','DD-MON-YY HH24:MI:SS')  ");
				}
			 
				if ((!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getNotesIndicator()) && BulkCrewScheduleReportTable.TRUE.equals(bulkCrewScheduleReportDTO.getNotesIndicator())) 
						&& (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getMessageIndicator())
								&& BulkCrewScheduleReportTable.TRUE.equals(bulkCrewScheduleReportDTO.getMessageIndicator()))) {
					strBuffer.append("  UNION " );
				}
			 
			 	if((!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getMessageIndicator()) && BulkCrewScheduleReportTable.TRUE.equals(bulkCrewScheduleReportDTO.getMessageIndicator())))
			 	{ 
					
					
			 			strBuffer.append("  SELECT d.crew_id AS crew_id, " 
			 					+ " CASE "
								+ "      when ( "
								+ "      select acy.FULL_DAY_IND from crw_own.crw_acy acy,crw_own.crw_rost rost where acy.delete_ind = 0 "
								+ "      and rost.delete_ind = 0 "
								+ "      and rost.ASGN_REF_ID = acy.ID "
								+ "      and rost.id = m.enty_ref_id "
								+ "      ) =1 "
								+ "      then m.EFF_FROM_DT + 180/1440"
								//+ "   CASE " 
								+ "      WHEN '" + timesIn + "' = 'UTC' "
								+ "		 THEN m.EFF_FROM_DT " 
								+ "      WHEN '" + timesIn + "' = 'Local'  "
								+ "		 AND  m.enty_type = 'D'"
								+ "		 THEN m.EFF_FROM_DT " 
								+ "      WHEN '" + timesIn+"' = 'Local' "
								+ "		 OR '" + timesIn+ "' = 'BASE'"
								+ "		 THEN m.EFF_FROM_DT + 180/1440 " 
								+ "   END stt_date, " 
								+ "   CASE "
								+ "      WHEN '" + timesIn + "' = 'UTC' "
								+ "		 THEN m.EFF_TO_DT " 
								+ "      WHEN '" + timesIn + "' = 'Local'  "
								+ "		 AND  m.enty_type = 'D'"
								+ "		 THEN m.EFF_TO_DT " 
								+ "      WHEN '" + timesIn+ "' = 'Local'  "
								+ "		 OR '" + timesIn+ "' = 'BASE'"
								+ "		 THEN m.EFF_TO_DT + 180/1440 " 
								+ "   END end_Date, " 
								+ "    note_msg_type AS IND "
								+ "  FROM crw_own.crw_note_msg m, " 
								+ "    crw_own.crw_msg_dtl d " 
								+ "  WHERE m.delete_ind = 0 "
								+ "  AND d.delete_ind   = 0 ");
			 			
					if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getCrewId())
							&& bulkCrewScheduleReportDTO.getCrewId().length() > 0) {
						crewId = bulkCrewScheduleReportDTO.getCrewId();
						temp = crewId.replaceAll(",", "','");
						strBuffer.append(" AND d.crew_id IN ('" + temp + "') ");
					}
					
					strBuffer.append("  AND m.id = d.CRW_NOTE_MSG_ID "
					+ "  AND m.EFF_FROM_DT BETWEEN to_date('" + startDate
					+ " 00:00:00','DD-MON-YY HH24:MI:SS') AND to_date('" + endDate
					+ " 23:59:59','DD-MON-YY HH24:MI:SS') " );
				
					
			 	}
			 	
			 	strBuffer.append("  ) " 
					+ "    ) " 
					+ "SELECT crew_id, " + "  m.column_value+ TRUNC(stt_date - 1), " + "  ind "
					+ "FROM t, " + "  TABLE (CAST (MULTISET " + "  (SELECT LEVEL l " + "  FROM DUAL "
					+ "    CONNECT BY LEVEL <= TRUNC(t.end_date)- TRUNC(t.stt_date) + 1 "
					+ "  ) AS SYS.odcinumberlist ) )m " + "ORDER BY crew_id , " + "  M.COLUMN_VALUE+TRUNC(STT_DATE-1)");

			preparedStatement = connection.prepareStatement(strBuffer.toString());
			resultSet = preparedStatement.executeQuery();
			BulkCrewScheduleReportSO forNotesIndicator = new BulkCrewScheduleReportSO();

			while (resultSet.next()) {
				if (!StringUtils.isEmpty(resultSet.getString("CREW_ID")))
					crewId = resultSet.getString("CREW_ID");

				if (StringUtils.isEmpty(previousCrewId) || !previousCrewId.equals(crewId)) {
					forNotesIndicator = mapFromResultSetProcessing.get(crewId);
					mapFromResultSetProcessing.put(crewId, forNotesIndicator);
				}

				if (null != forNotesIndicator) {

					String date = resultSet.getString("M.COLUMN_VALUE+TRUNC(STT_DATE-1)");
					Date dateFormat1 = myFormat.parse(date);
					String finalDate = myFormat2.format(dateFormat1);
					finalDate = finalDate.substring(0, finalDate.length() - 3);

					String index = Integer.toString(getIndexFromDateRange(datesInRange, finalDate));
					forNotesIndicator.setIndicators(index, resultSet.getString("IND"));

				}
				previousCrewId = crewId;
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally

		{
			try {
				close(connection, preparedStatement, resultSet);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return mapFromResultSetProcessing;

	}

	private Map<String, BulkCrewScheduleReportSO> setFDPIndicatorInBulkSOMap(List<String> datesInRange,
			Map<String, BulkCrewScheduleReportSO> mapFromResultSetProcessing,
			BulkCrewScheduleReportDTO BulkCrewScheduleReportDTO) {
		PreparedStatement preparedStatement = null;
		StringBuffer strBuffer;
		ResultSet resultSet = null;
		Connection connection = null;
		String startDate = null;
		String endDate = null;
		String temp = null;
		String previousCrewId = "";
		SimpleDateFormat myFormat2 = new SimpleDateFormat("dd-MMM-yy");
		SimpleDateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {

			if (!StringUtils.isEmpty(BulkCrewScheduleReportDTO.getDateRange())) {

				String[] period = BulkCrewScheduleReportDTO.getDateRange().split(BulkCrewScheduleReportTable.TO);
				startDate = period[0].trim();
				endDate = period[1].trim();
			}

			connection = getConnection();
			strBuffer = new StringBuffer();
			String crewId = null;

			strBuffer.append("WITH t AS " + "  (SELECT DISTINCT r.crew_id AS crew_id, " + "    (r.stt_date)stt_date , "
					+ "    (r.end_Date) end_Date, " + "    cflt.sch_date, " + "    cflt.dep_stn as dep, "
					+ "    cflt.arr_stn as arr, " + "    r.id AS rost_id, " + "    'D'  AS duty_ind, "
					+ "    cditem.duty_id as duty_id, " + "    'EFDP' ind " + "  FROM CRW_OWN.CRW_DUTY_DISN disn , "
					+ "    crw_own.crw_rost r , " + "    crw_own.crw_pair cpair, " + "    crw_own.crw_pair_duty cduty, "
					+ "    crw_own.crw_pair_duty_item cditem, " + "    crw_own.crw_flt cflt "
					+ "  WHERE r.delete_ind     =0 " + "  AND disn.delete_ind    =0 " + "  AND cpair.delete_ind   =0 "
					+ "  AND cduty.delete_ind   =0 " + "  AND cditem.delete_ind  =0 " + "  AND cflt.delete_ind    =0 "
					+ "  AND r.asgn_ref_id      = cpair.id " + "  AND cpair.id           = cduty.pair_id "
					+ "  AND cduty.id           = cditem.duty_id " + "  AND cditem.item_ref_id = cflt.id "
					+ "  AND cditem.item_type   = 'F' " 
					+ "  AND disn.rost_id       = r.id "
					+ "  AND disn.duty_id       = cditem.duty_id AND disn.DISN_TYPE       = 'FDP'" 
					+ " AND cflt.sch_date BETWEEN TO_DATE('" + startDate
					+ "','DD-MON-YYYY') AND TO_DATE('" + endDate + "','DD-MON-YYYY') + 1 ");

			if (!StringUtils.isEmpty(BulkCrewScheduleReportDTO.getCrewId())
					&& BulkCrewScheduleReportDTO.getCrewId().length() > 0) {
				crewId = BulkCrewScheduleReportDTO.getCrewId();
				temp = crewId.replaceAll(",", "','");
				strBuffer.append(" AND r.crew_id IN ('" + temp + "') ");
			}

			strBuffer
					.append(" ) SELECT crew_id,t.sch_date ," + "  m.column_value+ TRUNC(sch_date - 1), " + "  rost_id, "
							+ "  duty_ind, " + "  ind " + "FROM t, " + "  TABLE (CAST (MULTISET " + "  (SELECT LEVEL l "
							+ "  FROM DUAL " + "    CONNECT BY LEVEL <= TRUNC(t.sch_date)- TRUNC(t.sch_date) + 1 "
							+ "  ) AS SYS.odcinumberlist ) )m ");

			strBuffer.append(" ORDER  BY crew_id , M.COLUMN_VALUE+TRUNC(SCH_DATE-1)");

			preparedStatement = connection.prepareStatement(strBuffer.toString());
			resultSet = preparedStatement.executeQuery();
			BulkCrewScheduleReportSO forFDPIndicator = null ;

			while (resultSet.next()) {
				if (!StringUtils.isEmpty(resultSet.getString("CREW_ID")))
					crewId = resultSet.getString("CREW_ID");

				if (StringUtils.isEmpty(previousCrewId) || !previousCrewId.equals(crewId)) {
					//forFDPIndicator = new PersonalCrewScheduleReportSO();
					forFDPIndicator = mapFromResultSetProcessing.get(crewId);
				}

				if (null != forFDPIndicator) {

					String date = resultSet.getString("M.COLUMN_VALUE+TRUNC(SCH_DATE-1)");
					Date dateFormat1 = myFormat.parse(date);
					String finalDate = myFormat2.format(dateFormat1);
					finalDate = finalDate.substring(0, finalDate.length() - 3);

					String index = Integer.toString(getIndexFromDateRange(datesInRange, finalDate));
					forFDPIndicator.setIndicators(index, "EFDP");

				}
			
				mapFromResultSetProcessing.put(crewId, forFDPIndicator);
				previousCrewId = crewId;
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally

		{
			try {
				close(connection, preparedStatement, resultSet);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return mapFromResultSetProcessing;

	}

	private Map<String, BulkCrewScheduleReportSO> setDutyIndicatorInBulkSOMap(List<String> datesInRange,
			Map<String, BulkCrewScheduleReportSO> mapFromResultSetProcessing,
			BulkCrewScheduleReportDTO BulkCrewScheduleReportDTO) {
		PreparedStatement preparedStatement = null;
		StringBuffer strBuffer;
		ResultSet resultSet = null;
		Connection connection = null;
		String startDate = null;
		String endDate = null;
		//String temp = null;
		String previousCrewId = "";
		SimpleDateFormat myFormat2 = new SimpleDateFormat("dd-MMM-yy");
		SimpleDateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {

			if (!StringUtils.isEmpty(BulkCrewScheduleReportDTO.getDateRange())) {

				String[] period = BulkCrewScheduleReportDTO.getDateRange().split(BulkCrewScheduleReportTable.TO);
				startDate = period[0].trim();
				endDate = period[1].trim();
			}

			connection = getConnection();
			strBuffer = new StringBuffer();
			String crewId = null;
			String dutyIndicator = BulkCrewScheduleReportDTO.getDutyIndicator().replaceAll(",", "','");

			/*strBuffer.append(" with t as "
					+ "				(select distinct crew_id,(stt_date)stt_date ,(end_Date) end_Date,rost_id,duty_ind,'DUTYIN' ind "
					+ "				from crw_own.crw_duty_ind_vew r "
					+ "				where stt_date BETWEEN TO_DATE('" + startDate + "','DD-MON-YYYY') AND TO_DATE('"
					+ endDate + "','DD-MON-YYYY')" + "				AND duty_ind IN ('" + dutyIndicator + "' )");

			if (!StringUtils.isEmpty(BulkCrewScheduleReportDTO.getCrewId())
					&& BulkCrewScheduleReportDTO.getCrewId().length() > 0)

			{
				crewId = BulkCrewScheduleReportDTO.getCrewId();
				temp = crewId.replaceAll(",", "','");
				strBuffer.append(" AND crew_id IN ('" + temp + "') ");
			}

			strBuffer.append(" ) select crew_id,m.column_value+ trunc(stt_date - 1), rost_id, duty_ind,ind "
					+ "				from t,TABLE " + "				             (CAST "
					+ "				                 (MULTISET (SELECT     LEVEL l "
					+ "				                            FROM       DUAL "
					+ "				                            CONNECT BY LEVEL <= "
					+ "				                                            TRUNC(t.end_date)- TRUNC(t.stt_date)  + 1 "
					+ "				                           ) AS SYS.odcinumberlist "
					+ "				                 ) " + "				             )m");

			strBuffer.append(" ORDER  BY crew_id , M.COLUMN_VALUE+TRUNC(STT_DATE-1)");*/
			
			strBuffer.append("with t as " 
			+ "  ( select distinct rost.crew_id as crew_id, "
			+ " CASE "
			+ "		WHEN citem.item_type = 'F' "
			+ "		THEN crflt.sch_date "
			+ "		WHEN citem.item_type = 'A' "
			+ "		THEN cracy.stt_date "
			+ "		WHEN citem.item_type = 'G' "
			+ "		THEN crgnd.stt_date "
			+ "		WHEN rost.asgn_type='A' "
			+ "		THEN racy.stt_date  "
			+ "		ELSE rost.stt_date "
			+ " END as stt_date, "
			+ " CASE "
			+ "		WHEN citem.item_type = 'F'"
			+ " 	THEN crflt.sch_date "
			+ "		WHEN citem.item_type = 'A' "
			+ "		THEN cracy.end_date "
			+ "		WHEN citem.item_type = 'G' "
			+ "		THEN crgnd.end_date "
			+ "		WHEN rost.asgn_type='A' "
			+ "		THEN racy.end_date  "
			+ "		ELSE rost.end_date "
			+ " END as end_date, "
			+ " rost.id           as rost_id, " 
			+ " dind.item_ref_id, " 
			+ " rost.stt_date as r_dt, "
			+ " rost.end_date as r1_dt, " 
			+ " dind.duty_ind, " 
			+ " 'DUTYIN' ind "
			+ " FROM crw_own.crw_rost rost JOIN crw_own.crw_rost_pubd_ped pubd on pubd.crew_id=rost.crew_id "
			+ " AND  rost.stt_date<pubd.pubd_till_date "
			+ " AND  pubd.delete_ind=0 "
			+ " AND  rost.delete_ind=0 "
			+ " LEFT OUTER JOIN crw_own.crw_pair cpair on rost.asgn_type='P' "
			+ " AND  cpair.id=rost.asgn_ref_id "
			+ " AND  cpair.delete_ind=0 "
			+ " LEFT OUTER JOIN  crw_own.crw_pair_duty cduty on cpair.id = cduty.pair_id  "
			+ " AND  cduty.delete_ind=0 "
			+ " LEFT OUTER JOIN   crw_own.crw_pair_duty_item citem on cduty.id = citem.duty_id "
			+ " AND  citem.delete_ind=0 "
			+ " LEFT OUTER JOIN crw_own.crw_flt crflt on citem.item_type = 'F' "
			+ " AND  citem.item_ref_id = crflt.id"
			+ " AND  crflt.delete_ind=0 "
			+ " LEFT OUTER JOIN crw_own.crw_acy cracy  on citem.item_type = 'A' "
			+ " AND  citem.item_ref_id = cracy.id  "
			+ " AND  crflt.delete_ind=0 "
			+ " LEFT OUTER JOIN crw_own.crw_grnd_mvt crgnd  on citem.item_type = 'G' "
			+ " AND  citem.item_ref_id = crgnd.id  "
			+ " AND  crgnd.delete_ind=0 "
			+ " LEFT OUTER JOIN crw_own.crw_acy racy  on rost.asgn_type='A'  "
			+ " AND  racy.id=rost.asgn_ref_id "
			+ " AND  racy.delete_ind=0 "
			+ " JOIN crw_own.crw_duty_ind_vew dind on dind.rost_id = rost.id  "
			+ " AND "
			+ " CASE "
			+ " 	WHEN  citem.item_type  in ('F','A','G') "
			+ "		AND dind.item_ref_id = citem.item_ref_id "
			+ "		THEN 1 "
			+ "		WHEN rost.asgn_type IN ('A')"
			+ "     AND dind.item_ref_id  =  racy.id  "
			+ "     THEN 1 "
			+ " 	WHEN ind_on ='D' "
			+ "		AND  dind.rost_id = rost.id  "
			+ "		THEN 1 "
			+ " END = 1 "
			+ " where rost.asgn_type in ('P','A','D') "
			+ " AND rost.stt_date BETWEEN TO_DATE('" + startDate + "','DD-MON-YYYY') AND TO_DATE('"+ endDate + "','DD-MON-YYYY') + 1"
			//+ "AND rost.crew_id in ('212084') " 
			+ "	AND dind.duty_ind in ('" + dutyIndicator + "') " + "  ) " 
			+ "	select crew_id, "
			+ "	t.stt_date, " 
			+ " m.column_value+ trunc(stt_date - 1), " 
			+ " rost_id, " 
			+ " duty_ind, "
			+ " ind " 
			+ "	from t, " 
			+ " table (cast (multiset " 
			+ " (select level l " 
			+ " from dual "
			+ " connect by level <= trunc(t.end_date)- trunc(t.stt_date) + 1 "
			+ " ) as sys.odcinumberlist ) )m " 
			+ " order by crew_id , " 
			+ " m.column_value+trunc(stt_date-1)");

			preparedStatement = connection.prepareStatement(strBuffer.toString());
			resultSet = preparedStatement.executeQuery();
			BulkCrewScheduleReportSO forFDPIndicator = new BulkCrewScheduleReportSO();
			String date  = null;

			while (resultSet.next()) {
				if (!StringUtils.isEmpty(resultSet.getString("CREW_ID")))
					crewId = resultSet.getString("CREW_ID");

				if (StringUtils.isEmpty(previousCrewId) || !previousCrewId.equals(crewId)) {
					forFDPIndicator = mapFromResultSetProcessing.get(crewId);
					if(null != forFDPIndicator){
						mapFromResultSetProcessing.put(crewId, forFDPIndicator);
					}
				}

				if (null != forFDPIndicator) {
					if (null != resultSet.getString("M.COLUMN_VALUE+TRUNC(STT_DATE-1)")) {
						date = resultSet.getString("M.COLUMN_VALUE+TRUNC(STT_DATE-1)");
						Date dateFormat1 = myFormat.parse(date);
						String finalDate = myFormat2.format(dateFormat1);
						finalDate = finalDate.substring(0, finalDate.length() - 3);

						String index = Integer.toString(getIndexFromDateRange(datesInRange, finalDate));
						forFDPIndicator.setIndicatorsFromDB(index, resultSet.getString("DUTY_IND"));
					}

				}
				previousCrewId = crewId;
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally

		{
			try {
				close(connection, preparedStatement, resultSet);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return mapFromResultSetProcessing;

	}
	
	private Map<String, BulkCrewScheduleReportSO> setDutyIndicatorPubInBulkSOMap(List<String> datesInRange,
			Map<String, BulkCrewScheduleReportSO> mapFromResultSetProcessing,
			BulkCrewScheduleReportDTO BulkCrewScheduleReportDTO) {
		PreparedStatement preparedStatement = null;
		StringBuffer strBuffer;
		ResultSet resultSet = null;
		Connection connection = null;
		String startDate = null;
		String endDate = null;
		//String temp = null;
		String previousCrewId = "";
		SimpleDateFormat myFormat2 = new SimpleDateFormat("dd-MMM-yy");
		SimpleDateFormat myFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {

			if (!StringUtils.isEmpty(BulkCrewScheduleReportDTO.getDateRange())) {

				String[] period = BulkCrewScheduleReportDTO.getDateRange().split(BulkCrewScheduleReportTable.TO);
				startDate = period[0].trim();
				endDate = period[1].trim();
			}

			connection = getConnection();
			strBuffer = new StringBuffer();
			String crewId = null;
			String dutyIndicator = BulkCrewScheduleReportDTO.getDutyIndicator().replaceAll(",", "','");
			
			strBuffer.append(" WITH t AS " 
					+ "  ( SELECT DISTINCT rost.crew_id AS crew_id, " 
					+ "    CASE "
					+ "      WHEN citem.item_type = 'F' " 
					+ "      THEN crflt.sch_date "
					+ "      WHEN citem.item_type = 'A' " 
					+ "      THEN cracy.stt_date "
					+ "      WHEN citem.item_type = 'G' " 
					+ "      THEN crgnd.stt_date "
					+ "      WHEN rost.asgn_type='A' " 
					+ "      THEN racy.stt_date " 
					+ "      ELSE rost.stt_date "
					+ "    END AS stt_date, " 
					+ "    CASE " 
					+ "      WHEN citem.item_type = 'F' "
					+ "      THEN crflt.sch_date " 
					+ "      WHEN citem.item_type = 'A' " 
					+ "      THEN cracy.end_date "
					+ "      WHEN citem.item_type = 'G' " 
					+ "      THEN crgnd.end_date "
					+ "      WHEN rost.asgn_type='A' " 
					+ "      THEN racy.end_date " 
					+ "      ELSE rost.end_date "
					+ "    END     AS end_date, " 
					+ "    rost.id AS rost_id, " 
					+ "    dind.item_ref_id, "
					+ "    rost.stt_date AS r_dt, " 
					+ "    rost.end_date AS r1_dt, " 
					+ "    dind.duty_ind, "
					+ "    'DUTYIN' ind " 
					+ "  FROM crw_own.crw_rost_pubd_snap pubd "
					+ "  JOIN crw_own.crw_rost_snap rost " 
					+ "  ON pubd.crw_rost_snap_id = rost.id "
					+ "  AND pubd.crew_id         =rost.crew_id " 
					+ "  AND rost.ROST_VER_ID     = pubd.ROST_VER_ID "
					+ "  AND pubd.delete_ind      =0 " 
					+ "  AND rost.delete_ind      = 0 "
					+ "  LEFT OUTER JOIN crw_own.crw_pair_snap cpair " 
					+ "  ON rost.asgn_type     = 'P' "
					+ "  AND cpair.pair_id     = rost.asgn_ref_id " 
					+ "  AND cpair.pair_ver_id = rost.asgn_ref_ver_id "
					+ "  AND cpair.delete_ind  =0 " 
					+ "  LEFT OUTER JOIN crw_own.crw_pair_duty_snap cduty "
					+ "  ON cpair.id         = cduty.crw_pair_snap_id "
					+ "  AND cduty.delete_ind=0 "
					+ "  LEFT OUTER JOIN crw_own.crw_pair_duty_item_snap citem "
					+ "  ON cduty.id         = citem.crw_pair_duty_snap_id " 
					+ "  AND citem.delete_ind=0 "
					+ "  LEFT OUTER JOIN crw_own.crw_flt_snap crflt " 
					+ "  ON citem.item_type    = 'F' "
					+ "  AND citem.item_ref_id = crflt.flt_id " 
					+ "  AND crflt.delete_ind  =0 " 
					+ "  LEFT OUTER JOIN crw_own.crw_acy_snap cracy "
					+ "  ON citem.item_type    = 'A' " 
					+ "  AND citem.item_ref_id = cracy.acy_id "
					+ "  AND citem.item_ver_id = cracy.acy_ver_id " 
					+ "  AND cracy.delete_ind  =0 "
					+ "  LEFT OUTER JOIN crw_own.crw_grnd_mvt_snap crgnd " 
					+ "  ON citem.item_type    = 'G' "
					+ "  AND citem.item_ref_id = crgnd.grnd_mvt_id "
					+ "  AND citem.item_ver_id = crgnd.grnd_mvt_ver_id " 
					+ "  AND crgnd.delete_ind  =0 "
					+ "  LEFT OUTER JOIN crw_own.crw_acy_snap racy " 
					+ "  ON rost.asgn_type    ='A' "
					+ "  AND racy.acy_id          =rost.asgn_ref_id " 
					+ "  AND rost.rost_ver_id = racy.acy_ver_id "
					+ "  AND racy.delete_ind  =0 " 
					+ "  JOIN crw_own.CRW_DUTY_IND_SNAP_VEW dind "
					+ "  ON dind.rost_id = rost.id " 
					+ "  AND dind.crew_id = rost.crew_id " 
					+ "  AND " 
					+ "    CASE "
					+ "      WHEN citem.item_type IN ('F','A','G') "
					+ "      AND dind.item_ref_id  = citem.item_ref_id " 
					+ "      THEN 1       "
					+ "		 WHEN rost.asgn_type IN ('A')"
					+ "      AND dind.item_ref_id  =  racy.acy_id  "
					+ "      THEN 1 "
					+ "      WHEN ind_on      ='D' " 
					+ "      AND dind.rost_id = rost.id " 
					+ "      THEN 1 "
					+ "    END                 = 1 "
					+ "  WHERE rost.asgn_type    IN ('P','A','D') "
					+ "  AND rost.stt_date  BETWEEN TO_DATE('" + startDate + "','DD-MON-YYYY') AND TO_DATE('"+ endDate + "','DD-MON-YYYY') + 1"
					+ "  AND dind.duty_ind   IN ('" + dutyIndicator + "') " 
					+ "  AND pubd.PUBD_ID        IN "
					+ "    (SELECT CHG_TXN_ID " 
					+ "    FROM " 
					+ "      (SELECT CHG_TXN_ID, "
					+ "        row_number() over (partition BY crew_id,end_date order by CRE_DATT_BU DESC) AS rn "
					+ "      FROM crw_own.crw_rost_hist " 
					+ "      WHERE CHG_TYPE_CODE = 'RST_PUBLISHED' "
					+ "      AND crew_id         = rost.crew_id "
					+ "      AND STT_DATE       <=to_date('" + endDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS') "
					+ "      AND END_DATE       > to_date('" + startDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS') "
					+ "      ) " 
					+ "    WHERE rn =1 " 
					+ "    ) " 
					+ "  ) " 
					+ " SELECT crew_id, " 
					+ "  t.stt_date, "
					+ "  m.column_value+ TRUNC(stt_date - 1), " 
					+ "  rost_id, " 
					+ "  duty_ind, " 
					+ "  ind " 
					+ " FROM t, "
					+ "  TABLE (CAST (multiset " 
					+ "  (SELECT level l " 
					+ "  FROM dual "
					+ "    CONNECT BY level <= TRUNC(t.end_date)- TRUNC(t.stt_date) + 1 "
					+ "  ) AS sys.odcinumberlist ) )m " 
					+ " ORDER BY crew_id , " 
					+ "  m.column_value+TRUNC(stt_date-1)");

			preparedStatement = connection.prepareStatement(strBuffer.toString());
			resultSet = preparedStatement.executeQuery();
			BulkCrewScheduleReportSO forFDPIndicator = new BulkCrewScheduleReportSO();
			String date  = null;

			while (resultSet.next()) {
				if (!StringUtils.isEmpty(resultSet.getString("CREW_ID")))
					crewId = resultSet.getString("CREW_ID");

				if (StringUtils.isEmpty(previousCrewId) || !previousCrewId.equals(crewId)) {
					forFDPIndicator = mapFromResultSetProcessing.get(crewId);
					if(null != forFDPIndicator){
						mapFromResultSetProcessing.put(crewId, forFDPIndicator);
					}
				}

				if (null != forFDPIndicator) {
					if (null != resultSet.getString("M.COLUMN_VALUE+TRUNC(STT_DATE-1)")) {
						date = resultSet.getString("M.COLUMN_VALUE+TRUNC(STT_DATE-1)");
						Date dateFormat1 = myFormat.parse(date);
						String finalDate = myFormat2.format(dateFormat1);
						finalDate = finalDate.substring(0, finalDate.length() - 3);

						String index = Integer.toString(getIndexFromDateRange(datesInRange, finalDate));
						forFDPIndicator.setIndicatorsFromDB(index, resultSet.getString("DUTY_IND"));
					}

				}
				previousCrewId = crewId;
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally

		{
			try {
				close(connection, preparedStatement, resultSet);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		return mapFromResultSetProcessing;

	}


	private void addSortParams(StringBuffer strBuffer, BulkCrewScheduleReportDTO crewScheduleReporDTO) {

		String orderBy = "ASC";

		if ((null != crewScheduleReporDTO.getOrderByCol() && crewScheduleReporDTO.getOrderByCol().length() > 0)) {
			orderBy = crewScheduleReporDTO.getOrderByCol();
		}

		if (null != crewScheduleReporDTO.getOrderOnCol() && crewScheduleReporDTO.getOrderOnCol().length() > 0) {

			String orderOnCols[] = crewScheduleReporDTO.getOrderOnCol().split(",");
			strBuffer.append(" order by ");

			int i = 1;
			for (String orderOnCol : orderOnCols) {

				if (!orderOnCol.endsWith(orderBy)) {
					if (orderOnCol.equals("last_rank") || orderOnCol.equals("crew_type")) {
						orderOnCol = "last_rank_seq";
					}
					strBuffer.append(" " + orderOnCol + " " + orderBy);

				}

				if (i < orderOnCols.length) {
					strBuffer.append(",");
				}

				i++;
			}
			strBuffer.append(", crew_id,dat ,plnd_duty_rpt_date_fmt asc");

		} else {
			strBuffer.append(" order by crew_id,dat,plnd_duty_rpt_date_fmt asc");
		}
	}

	/*private List<String> getDatesInRange(BulkCrewScheduleReportDTO bulkCrewScheduleReportDTO) {
		String startDate = null;
		String endDate = null;
		String toDate = null;
		List<String> datesInRange = new ArrayList<>();
		SimpleDateFormat pattern = new SimpleDateFormat("dd-MMM-yy");
		if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDateRange())) {

			String[] period = bulkCrewScheduleReportDTO.getDateRange().split(BulkCrewScheduleReportTable.TO);
			startDate = period[0].trim();
			endDate = period[1].trim();

			try {
				Date date1 = pattern.parse(startDate);
				Date date2 = pattern.parse(endDate);
				Calendar calendar = Calendar.getInstance();
				calendar.setTime(date2);
				calendar.add(Calendar.DAY_OF_YEAR, 1);
				toDate = pattern.format(calendar.getTime());

				Date date3 = pattern.parse(toDate);

				calendar = new GregorianCalendar();
				calendar.setTime(date1);

				Calendar endCalendar = new GregorianCalendar();
				endCalendar.setTime(date3);
				while (calendar.before(endCalendar)) {
					String finalDate = pattern.format(calendar.getTime());
					datesInRange.add(finalDate.substring(0, finalDate.length() - 3));
					calendar.add(Calendar.DATE, 1);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

		}
		return datesInRange;
	}
*/
	private Integer getIndexFromDateRange(List<String> datesInRange, String Date) {
		Integer index = datesInRange.indexOf(Date);
		return index + 1;

	}
	
	private List<List<String>> getDatesInRange(BulkCrewScheduleReportDTO bulkCrewScheduleReportDTO) {
		String startDate = null;
		String endDate = null;
		String toDate = null;
		List<List<String>> datesInRangeList = new ArrayList<>();
		List<String> datesInRange = new ArrayList<>();
		List<String> datesInRange2 = new ArrayList<>();
		SimpleDateFormat pattern = new SimpleDateFormat("dd-MMM-yy");
		SimpleDateFormat pattern1 = new SimpleDateFormat("EEE,dd-MMM-yy");
		if (!StringUtils.isEmpty(bulkCrewScheduleReportDTO.getDateRange())) {

			String[] period = bulkCrewScheduleReportDTO.getDateRange().split(BulkCrewScheduleReportTable.TO);
			startDate = period[0].trim();
			endDate = period[1].trim();

			try {
				Date date1 = pattern.parse(startDate);
				Date date2 = pattern.parse(endDate);
				Calendar calendar = Calendar.getInstance();
				calendar.setTime(date2);
				calendar.add(Calendar.DAY_OF_YEAR, 1);
				toDate = pattern.format(calendar.getTime());

				Date date3 = pattern.parse(toDate);

				calendar = new GregorianCalendar();
				calendar.setTime(date1);

				Calendar endCalendar = new GregorianCalendar();
				endCalendar.setTime(date3);
				while (calendar.before(endCalendar)) {
					String finalDate = pattern1.format(calendar.getTime());
					datesInRange.add(finalDate.substring(4, finalDate.length() - 3));
					String s  = finalDate.substring(4, finalDate.length() - 3) + "\n" + finalDate.substring(0, finalDate.length() - 10);
					datesInRange2.add(s);
					calendar.add(Calendar.DATE, 1);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

		}
		
		datesInRangeList.add(datesInRange);
		datesInRangeList.add(datesInRange2);
		
		return datesInRangeList;
	}

}
